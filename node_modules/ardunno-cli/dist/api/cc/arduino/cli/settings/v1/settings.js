"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsServiceDefinition = exports.DeleteResponse = exports.DeleteRequest = exports.WriteResponse = exports.WriteRequest = exports.SetValueResponse = exports.MergeResponse = exports.GetValueRequest = exports.GetAllRequest = exports.SetValueRequest = exports.GetValueResponse = exports.MergeRequest = exports.GetAllResponse = void 0;
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseGetAllResponse() {
    return { jsonData: '' };
}
exports.GetAllResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.jsonData !== '') {
            writer.uint32(10).string(message.jsonData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.jsonData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            jsonData: isSet(object.jsonData) ? String(object.jsonData) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.jsonData !== undefined && (obj.jsonData = message.jsonData);
        return obj;
    },
    create(base) {
        return exports.GetAllResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetAllResponse();
        message.jsonData = (_a = object.jsonData) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseMergeRequest() {
    return { jsonData: '' };
}
exports.MergeRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.jsonData !== '') {
            writer.uint32(10).string(message.jsonData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMergeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.jsonData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            jsonData: isSet(object.jsonData) ? String(object.jsonData) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.jsonData !== undefined && (obj.jsonData = message.jsonData);
        return obj;
    },
    create(base) {
        return exports.MergeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMergeRequest();
        message.jsonData = (_a = object.jsonData) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseGetValueResponse() {
    return { key: '', jsonData: '' };
}
exports.GetValueResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== '') {
            writer.uint32(10).string(message.key);
        }
        if (message.jsonData !== '') {
            writer.uint32(18).string(message.jsonData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetValueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.jsonData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : '',
            jsonData: isSet(object.jsonData) ? String(object.jsonData) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.jsonData !== undefined && (obj.jsonData = message.jsonData);
        return obj;
    },
    create(base) {
        return exports.GetValueResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetValueResponse();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : '';
        message.jsonData = (_b = object.jsonData) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseSetValueRequest() {
    return { key: '', jsonData: '' };
}
exports.SetValueRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== '') {
            writer.uint32(10).string(message.key);
        }
        if (message.jsonData !== '') {
            writer.uint32(18).string(message.jsonData);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetValueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.jsonData = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : '',
            jsonData: isSet(object.jsonData) ? String(object.jsonData) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.jsonData !== undefined && (obj.jsonData = message.jsonData);
        return obj;
    },
    create(base) {
        return exports.SetValueRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetValueRequest();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : '';
        message.jsonData = (_b = object.jsonData) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseGetAllRequest() {
    return {};
}
exports.GetAllRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetAllRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetAllRequest();
        return message;
    },
};
function createBaseGetValueRequest() {
    return { key: '' };
}
exports.GetValueRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== '') {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetValueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : '' };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        return obj;
    },
    create(base) {
        return exports.GetValueRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetValueRequest();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseMergeResponse() {
    return {};
}
exports.MergeResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMergeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MergeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMergeResponse();
        return message;
    },
};
function createBaseSetValueResponse() {
    return {};
}
exports.SetValueResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetValueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetValueResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseSetValueResponse();
        return message;
    },
};
function createBaseWriteRequest() {
    return { filePath: '' };
}
exports.WriteRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.filePath !== '') {
            writer.uint32(10).string(message.filePath);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWriteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filePath: isSet(object.filePath) ? String(object.filePath) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.filePath !== undefined && (obj.filePath = message.filePath);
        return obj;
    },
    create(base) {
        return exports.WriteRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseWriteRequest();
        message.filePath = (_a = object.filePath) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseWriteResponse() {
    return {};
}
exports.WriteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWriteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.WriteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseWriteResponse();
        return message;
    },
};
function createBaseDeleteRequest() {
    return { key: '' };
}
exports.DeleteRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== '') {
            writer.uint32(10).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : '' };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        return obj;
    },
    create(base) {
        return exports.DeleteRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteRequest();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
function createBaseDeleteResponse() {
    return {};
}
exports.DeleteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DeleteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseDeleteResponse();
        return message;
    },
};
exports.SettingsServiceDefinition = {
    name: 'SettingsService',
    fullName: 'cc.arduino.cli.settings.v1.SettingsService',
    methods: {
        /** List all the settings. */
        getAll: {
            name: 'GetAll',
            requestType: exports.GetAllRequest,
            requestStream: false,
            responseType: exports.GetAllResponse,
            responseStream: false,
            options: {},
        },
        /** Set multiple settings values at once. */
        merge: {
            name: 'Merge',
            requestType: exports.MergeRequest,
            requestStream: false,
            responseType: exports.MergeResponse,
            responseStream: false,
            options: {},
        },
        /** Get the value of a specific setting. */
        getValue: {
            name: 'GetValue',
            requestType: exports.GetValueRequest,
            requestStream: false,
            responseType: exports.GetValueResponse,
            responseStream: false,
            options: {},
        },
        /** Set the value of a specific setting. */
        setValue: {
            name: 'SetValue',
            requestType: exports.SetValueRequest,
            requestStream: false,
            responseType: exports.SetValueResponse,
            responseStream: false,
            options: {},
        },
        /** Writes to file settings currently stored in memory */
        write: {
            name: 'Write',
            requestType: exports.WriteRequest,
            requestStream: false,
            responseType: exports.WriteResponse,
            responseStream: false,
            options: {},
        },
        /** Deletes an entry and rewrites the file settings */
        delete: {
            name: 'Delete',
            requestType: exports.DeleteRequest,
            requestStream: false,
            responseType: exports.DeleteResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
