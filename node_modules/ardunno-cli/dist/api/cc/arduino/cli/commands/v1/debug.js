"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugOpenOCDServerConfiguration = exports.DebugGCCToolchainConfiguration = exports.GetDebugConfigResponse_CustomConfigsEntry = exports.GetDebugConfigResponse = exports.GetDebugConfigRequest = exports.IsDebugSupportedResponse = exports.IsDebugSupportedRequest = exports.DebugResponse = exports.DebugRequest = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../../../../../google/protobuf/any");
const common_1 = require("./common");
const port_1 = require("./port");
function createBaseDebugRequest() {
    return {
        debugRequest: undefined,
        data: new Uint8Array(0),
        sendInterrupt: false,
    };
}
exports.DebugRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.debugRequest !== undefined) {
            exports.GetDebugConfigRequest.encode(message.debugRequest, writer.uint32(10).fork()).ldelim();
        }
        if (message.data.length !== 0) {
            writer.uint32(18).bytes(message.data);
        }
        if (message.sendInterrupt === true) {
            writer.uint32(24).bool(message.sendInterrupt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.debugRequest = exports.GetDebugConfigRequest.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.sendInterrupt = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            debugRequest: isSet(object.debugRequest)
                ? exports.GetDebugConfigRequest.fromJSON(object.debugRequest)
                : undefined,
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(0),
            sendInterrupt: isSet(object.sendInterrupt)
                ? Boolean(object.sendInterrupt)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.debugRequest !== undefined &&
            (obj.debugRequest = message.debugRequest
                ? exports.GetDebugConfigRequest.toJSON(message.debugRequest)
                : undefined);
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array(0)));
        message.sendInterrupt !== undefined &&
            (obj.sendInterrupt = message.sendInterrupt);
        return obj;
    },
    create(base) {
        return exports.DebugRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDebugRequest();
        message.debugRequest =
            object.debugRequest !== undefined && object.debugRequest !== null
                ? exports.GetDebugConfigRequest.fromPartial(object.debugRequest)
                : undefined;
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.sendInterrupt = (_b = object.sendInterrupt) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseDebugResponse() {
    return { data: new Uint8Array(0), error: '' };
}
exports.DebugResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        if (message.error !== '') {
            writer.uint32(18).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isSet(object.data)
                ? bytesFromBase64(object.data)
                : new Uint8Array(0),
            error: isSet(object.error) ? String(object.error) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.data !== undefined &&
            (obj.data = base64FromBytes(message.data !== undefined ? message.data : new Uint8Array(0)));
        message.error !== undefined && (obj.error = message.error);
        return obj;
    },
    create(base) {
        return exports.DebugResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDebugResponse();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.error = (_b = object.error) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseIsDebugSupportedRequest() {
    return {
        instance: undefined,
        fqbn: '',
        port: undefined,
        interpreter: '',
        programmer: '',
    };
}
exports.IsDebugSupportedRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.fqbn !== '') {
            writer.uint32(18).string(message.fqbn);
        }
        if (message.port !== undefined) {
            port_1.Port.encode(message.port, writer.uint32(26).fork()).ldelim();
        }
        if (message.interpreter !== '') {
            writer.uint32(34).string(message.interpreter);
        }
        if (message.programmer !== '') {
            writer.uint32(42).string(message.programmer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsDebugSupportedRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fqbn = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.port = port_1.Port.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.interpreter = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.programmer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            fqbn: isSet(object.fqbn) ? String(object.fqbn) : '',
            port: isSet(object.port) ? port_1.Port.fromJSON(object.port) : undefined,
            interpreter: isSet(object.interpreter)
                ? String(object.interpreter)
                : '',
            programmer: isSet(object.programmer)
                ? String(object.programmer)
                : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.fqbn !== undefined && (obj.fqbn = message.fqbn);
        message.port !== undefined &&
            (obj.port = message.port ? port_1.Port.toJSON(message.port) : undefined);
        message.interpreter !== undefined &&
            (obj.interpreter = message.interpreter);
        message.programmer !== undefined &&
            (obj.programmer = message.programmer);
        return obj;
    },
    create(base) {
        return exports.IsDebugSupportedRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseIsDebugSupportedRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.fqbn = (_a = object.fqbn) !== null && _a !== void 0 ? _a : '';
        message.port =
            object.port !== undefined && object.port !== null
                ? port_1.Port.fromPartial(object.port)
                : undefined;
        message.interpreter = (_b = object.interpreter) !== null && _b !== void 0 ? _b : '';
        message.programmer = (_c = object.programmer) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseIsDebugSupportedResponse() {
    return { debuggingSupported: false, debugFqbn: '' };
}
exports.IsDebugSupportedResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.debuggingSupported === true) {
            writer.uint32(8).bool(message.debuggingSupported);
        }
        if (message.debugFqbn !== '') {
            writer.uint32(18).string(message.debugFqbn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsDebugSupportedResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.debuggingSupported = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.debugFqbn = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            debuggingSupported: isSet(object.debuggingSupported)
                ? Boolean(object.debuggingSupported)
                : false,
            debugFqbn: isSet(object.debugFqbn) ? String(object.debugFqbn) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.debuggingSupported !== undefined &&
            (obj.debuggingSupported = message.debuggingSupported);
        message.debugFqbn !== undefined && (obj.debugFqbn = message.debugFqbn);
        return obj;
    },
    create(base) {
        return exports.IsDebugSupportedResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseIsDebugSupportedResponse();
        message.debuggingSupported = (_a = object.debuggingSupported) !== null && _a !== void 0 ? _a : false;
        message.debugFqbn = (_b = object.debugFqbn) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseGetDebugConfigRequest() {
    return {
        instance: undefined,
        fqbn: '',
        sketchPath: '',
        port: undefined,
        interpreter: '',
        importDir: '',
        programmer: '',
    };
}
exports.GetDebugConfigRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.fqbn !== '') {
            writer.uint32(18).string(message.fqbn);
        }
        if (message.sketchPath !== '') {
            writer.uint32(26).string(message.sketchPath);
        }
        if (message.port !== undefined) {
            port_1.Port.encode(message.port, writer.uint32(34).fork()).ldelim();
        }
        if (message.interpreter !== '') {
            writer.uint32(42).string(message.interpreter);
        }
        if (message.importDir !== '') {
            writer.uint32(66).string(message.importDir);
        }
        if (message.programmer !== '') {
            writer.uint32(74).string(message.programmer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDebugConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fqbn = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sketchPath = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.port = port_1.Port.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.interpreter = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.importDir = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.programmer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            fqbn: isSet(object.fqbn) ? String(object.fqbn) : '',
            sketchPath: isSet(object.sketchPath)
                ? String(object.sketchPath)
                : '',
            port: isSet(object.port) ? port_1.Port.fromJSON(object.port) : undefined,
            interpreter: isSet(object.interpreter)
                ? String(object.interpreter)
                : '',
            importDir: isSet(object.importDir) ? String(object.importDir) : '',
            programmer: isSet(object.programmer)
                ? String(object.programmer)
                : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.fqbn !== undefined && (obj.fqbn = message.fqbn);
        message.sketchPath !== undefined &&
            (obj.sketchPath = message.sketchPath);
        message.port !== undefined &&
            (obj.port = message.port ? port_1.Port.toJSON(message.port) : undefined);
        message.interpreter !== undefined &&
            (obj.interpreter = message.interpreter);
        message.importDir !== undefined && (obj.importDir = message.importDir);
        message.programmer !== undefined &&
            (obj.programmer = message.programmer);
        return obj;
    },
    create(base) {
        return exports.GetDebugConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseGetDebugConfigRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.fqbn = (_a = object.fqbn) !== null && _a !== void 0 ? _a : '';
        message.sketchPath = (_b = object.sketchPath) !== null && _b !== void 0 ? _b : '';
        message.port =
            object.port !== undefined && object.port !== null
                ? port_1.Port.fromPartial(object.port)
                : undefined;
        message.interpreter = (_c = object.interpreter) !== null && _c !== void 0 ? _c : '';
        message.importDir = (_d = object.importDir) !== null && _d !== void 0 ? _d : '';
        message.programmer = (_e = object.programmer) !== null && _e !== void 0 ? _e : '';
        return message;
    },
};
function createBaseGetDebugConfigResponse() {
    return {
        executable: '',
        toolchain: '',
        toolchainPath: '',
        toolchainPrefix: '',
        server: '',
        serverPath: '',
        toolchainConfiguration: undefined,
        serverConfiguration: undefined,
        customConfigs: {},
        svdFile: '',
        programmer: '',
    };
}
exports.GetDebugConfigResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.executable !== '') {
            writer.uint32(10).string(message.executable);
        }
        if (message.toolchain !== '') {
            writer.uint32(18).string(message.toolchain);
        }
        if (message.toolchainPath !== '') {
            writer.uint32(26).string(message.toolchainPath);
        }
        if (message.toolchainPrefix !== '') {
            writer.uint32(34).string(message.toolchainPrefix);
        }
        if (message.server !== '') {
            writer.uint32(42).string(message.server);
        }
        if (message.serverPath !== '') {
            writer.uint32(50).string(message.serverPath);
        }
        if (message.toolchainConfiguration !== undefined) {
            any_1.Any.encode(message.toolchainConfiguration, writer.uint32(58).fork()).ldelim();
        }
        if (message.serverConfiguration !== undefined) {
            any_1.Any.encode(message.serverConfiguration, writer.uint32(66).fork()).ldelim();
        }
        Object.entries(message.customConfigs).forEach(([key, value]) => {
            exports.GetDebugConfigResponse_CustomConfigsEntry.encode({ key: key, value }, writer.uint32(74).fork()).ldelim();
        });
        if (message.svdFile !== '') {
            writer.uint32(82).string(message.svdFile);
        }
        if (message.programmer !== '') {
            writer.uint32(90).string(message.programmer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDebugConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.executable = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.toolchain = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.toolchainPath = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.toolchainPrefix = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.server = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.serverPath = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.toolchainConfiguration = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.serverConfiguration = any_1.Any.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    const entry9 = exports.GetDebugConfigResponse_CustomConfigsEntry.decode(reader, reader.uint32());
                    if (entry9.value !== undefined) {
                        message.customConfigs[entry9.key] = entry9.value;
                    }
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.svdFile = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.programmer = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            executable: isSet(object.executable)
                ? String(object.executable)
                : '',
            toolchain: isSet(object.toolchain) ? String(object.toolchain) : '',
            toolchainPath: isSet(object.toolchainPath)
                ? String(object.toolchainPath)
                : '',
            toolchainPrefix: isSet(object.toolchainPrefix)
                ? String(object.toolchainPrefix)
                : '',
            server: isSet(object.server) ? String(object.server) : '',
            serverPath: isSet(object.serverPath)
                ? String(object.serverPath)
                : '',
            toolchainConfiguration: isSet(object.toolchainConfiguration)
                ? any_1.Any.fromJSON(object.toolchainConfiguration)
                : undefined,
            serverConfiguration: isSet(object.serverConfiguration)
                ? any_1.Any.fromJSON(object.serverConfiguration)
                : undefined,
            customConfigs: isObject(object.customConfigs)
                ? Object.entries(object.customConfigs).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            svdFile: isSet(object.svdFile) ? String(object.svdFile) : '',
            programmer: isSet(object.programmer)
                ? String(object.programmer)
                : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.executable !== undefined &&
            (obj.executable = message.executable);
        message.toolchain !== undefined && (obj.toolchain = message.toolchain);
        message.toolchainPath !== undefined &&
            (obj.toolchainPath = message.toolchainPath);
        message.toolchainPrefix !== undefined &&
            (obj.toolchainPrefix = message.toolchainPrefix);
        message.server !== undefined && (obj.server = message.server);
        message.serverPath !== undefined &&
            (obj.serverPath = message.serverPath);
        message.toolchainConfiguration !== undefined &&
            (obj.toolchainConfiguration = message.toolchainConfiguration
                ? any_1.Any.toJSON(message.toolchainConfiguration)
                : undefined);
        message.serverConfiguration !== undefined &&
            (obj.serverConfiguration = message.serverConfiguration
                ? any_1.Any.toJSON(message.serverConfiguration)
                : undefined);
        obj.customConfigs = {};
        if (message.customConfigs) {
            Object.entries(message.customConfigs).forEach(([k, v]) => {
                obj.customConfigs[k] = v;
            });
        }
        message.svdFile !== undefined && (obj.svdFile = message.svdFile);
        message.programmer !== undefined &&
            (obj.programmer = message.programmer);
        return obj;
    },
    create(base) {
        return exports.GetDebugConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseGetDebugConfigResponse();
        message.executable = (_a = object.executable) !== null && _a !== void 0 ? _a : '';
        message.toolchain = (_b = object.toolchain) !== null && _b !== void 0 ? _b : '';
        message.toolchainPath = (_c = object.toolchainPath) !== null && _c !== void 0 ? _c : '';
        message.toolchainPrefix = (_d = object.toolchainPrefix) !== null && _d !== void 0 ? _d : '';
        message.server = (_e = object.server) !== null && _e !== void 0 ? _e : '';
        message.serverPath = (_f = object.serverPath) !== null && _f !== void 0 ? _f : '';
        message.toolchainConfiguration =
            object.toolchainConfiguration !== undefined &&
                object.toolchainConfiguration !== null
                ? any_1.Any.fromPartial(object.toolchainConfiguration)
                : undefined;
        message.serverConfiguration =
            object.serverConfiguration !== undefined &&
                object.serverConfiguration !== null
                ? any_1.Any.fromPartial(object.serverConfiguration)
                : undefined;
        message.customConfigs = Object.entries((_g = object.customConfigs) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.svdFile = (_h = object.svdFile) !== null && _h !== void 0 ? _h : '';
        message.programmer = (_j = object.programmer) !== null && _j !== void 0 ? _j : '';
        return message;
    },
};
function createBaseGetDebugConfigResponse_CustomConfigsEntry() {
    return { key: '', value: '' };
}
exports.GetDebugConfigResponse_CustomConfigsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== '') {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== '') {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDebugConfigResponse_CustomConfigsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : '',
            value: isSet(object.value) ? String(object.value) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return exports.GetDebugConfigResponse_CustomConfigsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetDebugConfigResponse_CustomConfigsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : '';
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseDebugGCCToolchainConfiguration() {
    return {};
}
exports.DebugGCCToolchainConfiguration = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugGCCToolchainConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.DebugGCCToolchainConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseDebugGCCToolchainConfiguration();
        return message;
    },
};
function createBaseDebugOpenOCDServerConfiguration() {
    return { path: '', scriptsDir: '', scripts: [] };
}
exports.DebugOpenOCDServerConfiguration = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.path !== '') {
            writer.uint32(10).string(message.path);
        }
        if (message.scriptsDir !== '') {
            writer.uint32(18).string(message.scriptsDir);
        }
        for (const v of message.scripts) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugOpenOCDServerConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.scriptsDir = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.scripts.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? String(object.path) : '',
            scriptsDir: isSet(object.scriptsDir)
                ? String(object.scriptsDir)
                : '',
            scripts: Array.isArray(object === null || object === void 0 ? void 0 : object.scripts)
                ? object.scripts.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.path !== undefined && (obj.path = message.path);
        message.scriptsDir !== undefined &&
            (obj.scriptsDir = message.scriptsDir);
        if (message.scripts) {
            obj.scripts = message.scripts.map((e) => e);
        }
        else {
            obj.scripts = [];
        }
        return obj;
    },
    create(base) {
        return exports.DebugOpenOCDServerConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseDebugOpenOCDServerConfiguration();
        message.path = (_a = object.path) !== null && _a !== void 0 ? _a : '';
        message.scriptsDir = (_b = object.scriptsDir) !== null && _b !== void 0 ? _b : '';
        message.scripts = ((_c = object.scripts) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    throw 'Unable to locate global object';
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, 'base64'));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString('base64');
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(''));
    }
}
function isObject(value) {
    return typeof value === 'object' && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
