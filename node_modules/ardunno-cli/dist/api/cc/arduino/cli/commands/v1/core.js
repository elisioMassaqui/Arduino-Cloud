"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformListResponse = exports.PlatformListRequest = exports.PlatformSearchResponse = exports.PlatformSearchRequest = exports.PlatformUpgradeResponse = exports.PlatformUpgradeRequest = exports.AlreadyAtLatestVersionError = exports.PlatformUninstallResponse = exports.PlatformUninstallRequest = exports.PlatformDownloadResponse = exports.PlatformDownloadRequest = exports.PlatformLoadingError = exports.PlatformInstallResponse = exports.PlatformInstallRequest = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const common_1 = require("./common");
function createBasePlatformInstallRequest() {
    return {
        instance: undefined,
        platformPackage: '',
        architecture: '',
        version: '',
        skipPostInstall: false,
        noOverwrite: false,
        skipPreUninstall: false,
    };
}
exports.PlatformInstallRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.platformPackage !== '') {
            writer.uint32(18).string(message.platformPackage);
        }
        if (message.architecture !== '') {
            writer.uint32(26).string(message.architecture);
        }
        if (message.version !== '') {
            writer.uint32(34).string(message.version);
        }
        if (message.skipPostInstall === true) {
            writer.uint32(40).bool(message.skipPostInstall);
        }
        if (message.noOverwrite === true) {
            writer.uint32(48).bool(message.noOverwrite);
        }
        if (message.skipPreUninstall === true) {
            writer.uint32(56).bool(message.skipPreUninstall);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformInstallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.platformPackage = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.architecture = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.skipPostInstall = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.noOverwrite = reader.bool();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.skipPreUninstall = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            platformPackage: isSet(object.platformPackage)
                ? String(object.platformPackage)
                : '',
            architecture: isSet(object.architecture)
                ? String(object.architecture)
                : '',
            version: isSet(object.version) ? String(object.version) : '',
            skipPostInstall: isSet(object.skipPostInstall)
                ? Boolean(object.skipPostInstall)
                : false,
            noOverwrite: isSet(object.noOverwrite)
                ? Boolean(object.noOverwrite)
                : false,
            skipPreUninstall: isSet(object.skipPreUninstall)
                ? Boolean(object.skipPreUninstall)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.platformPackage !== undefined &&
            (obj.platformPackage = message.platformPackage);
        message.architecture !== undefined &&
            (obj.architecture = message.architecture);
        message.version !== undefined && (obj.version = message.version);
        message.skipPostInstall !== undefined &&
            (obj.skipPostInstall = message.skipPostInstall);
        message.noOverwrite !== undefined &&
            (obj.noOverwrite = message.noOverwrite);
        message.skipPreUninstall !== undefined &&
            (obj.skipPreUninstall = message.skipPreUninstall);
        return obj;
    },
    create(base) {
        return exports.PlatformInstallRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePlatformInstallRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.platformPackage = (_a = object.platformPackage) !== null && _a !== void 0 ? _a : '';
        message.architecture = (_b = object.architecture) !== null && _b !== void 0 ? _b : '';
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : '';
        message.skipPostInstall = (_d = object.skipPostInstall) !== null && _d !== void 0 ? _d : false;
        message.noOverwrite = (_e = object.noOverwrite) !== null && _e !== void 0 ? _e : false;
        message.skipPreUninstall = (_f = object.skipPreUninstall) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBasePlatformInstallResponse() {
    return { progress: undefined, taskProgress: undefined };
}
exports.PlatformInstallResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.progress !== undefined) {
            common_1.DownloadProgress.encode(message.progress, writer.uint32(10).fork()).ldelim();
        }
        if (message.taskProgress !== undefined) {
            common_1.TaskProgress.encode(message.taskProgress, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformInstallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.progress = common_1.DownloadProgress.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.taskProgress = common_1.TaskProgress.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            progress: isSet(object.progress)
                ? common_1.DownloadProgress.fromJSON(object.progress)
                : undefined,
            taskProgress: isSet(object.taskProgress)
                ? common_1.TaskProgress.fromJSON(object.taskProgress)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.progress !== undefined &&
            (obj.progress = message.progress
                ? common_1.DownloadProgress.toJSON(message.progress)
                : undefined);
        message.taskProgress !== undefined &&
            (obj.taskProgress = message.taskProgress
                ? common_1.TaskProgress.toJSON(message.taskProgress)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.PlatformInstallResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBasePlatformInstallResponse();
        message.progress =
            object.progress !== undefined && object.progress !== null
                ? common_1.DownloadProgress.fromPartial(object.progress)
                : undefined;
        message.taskProgress =
            object.taskProgress !== undefined && object.taskProgress !== null
                ? common_1.TaskProgress.fromPartial(object.taskProgress)
                : undefined;
        return message;
    },
};
function createBasePlatformLoadingError() {
    return {};
}
exports.PlatformLoadingError = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformLoadingError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.PlatformLoadingError.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBasePlatformLoadingError();
        return message;
    },
};
function createBasePlatformDownloadRequest() {
    return {
        instance: undefined,
        platformPackage: '',
        architecture: '',
        version: '',
    };
}
exports.PlatformDownloadRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.platformPackage !== '') {
            writer.uint32(18).string(message.platformPackage);
        }
        if (message.architecture !== '') {
            writer.uint32(26).string(message.architecture);
        }
        if (message.version !== '') {
            writer.uint32(34).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformDownloadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.platformPackage = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.architecture = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            platformPackage: isSet(object.platformPackage)
                ? String(object.platformPackage)
                : '',
            architecture: isSet(object.architecture)
                ? String(object.architecture)
                : '',
            version: isSet(object.version) ? String(object.version) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.platformPackage !== undefined &&
            (obj.platformPackage = message.platformPackage);
        message.architecture !== undefined &&
            (obj.architecture = message.architecture);
        message.version !== undefined && (obj.version = message.version);
        return obj;
    },
    create(base) {
        return exports.PlatformDownloadRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePlatformDownloadRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.platformPackage = (_a = object.platformPackage) !== null && _a !== void 0 ? _a : '';
        message.architecture = (_b = object.architecture) !== null && _b !== void 0 ? _b : '';
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBasePlatformDownloadResponse() {
    return { progress: undefined };
}
exports.PlatformDownloadResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.progress !== undefined) {
            common_1.DownloadProgress.encode(message.progress, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformDownloadResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.progress = common_1.DownloadProgress.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            progress: isSet(object.progress)
                ? common_1.DownloadProgress.fromJSON(object.progress)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.progress !== undefined &&
            (obj.progress = message.progress
                ? common_1.DownloadProgress.toJSON(message.progress)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.PlatformDownloadResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBasePlatformDownloadResponse();
        message.progress =
            object.progress !== undefined && object.progress !== null
                ? common_1.DownloadProgress.fromPartial(object.progress)
                : undefined;
        return message;
    },
};
function createBasePlatformUninstallRequest() {
    return {
        instance: undefined,
        platformPackage: '',
        architecture: '',
        skipPreUninstall: false,
    };
}
exports.PlatformUninstallRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.platformPackage !== '') {
            writer.uint32(18).string(message.platformPackage);
        }
        if (message.architecture !== '') {
            writer.uint32(26).string(message.architecture);
        }
        if (message.skipPreUninstall === true) {
            writer.uint32(32).bool(message.skipPreUninstall);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformUninstallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.platformPackage = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.architecture = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.skipPreUninstall = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            platformPackage: isSet(object.platformPackage)
                ? String(object.platformPackage)
                : '',
            architecture: isSet(object.architecture)
                ? String(object.architecture)
                : '',
            skipPreUninstall: isSet(object.skipPreUninstall)
                ? Boolean(object.skipPreUninstall)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.platformPackage !== undefined &&
            (obj.platformPackage = message.platformPackage);
        message.architecture !== undefined &&
            (obj.architecture = message.architecture);
        message.skipPreUninstall !== undefined &&
            (obj.skipPreUninstall = message.skipPreUninstall);
        return obj;
    },
    create(base) {
        return exports.PlatformUninstallRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePlatformUninstallRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.platformPackage = (_a = object.platformPackage) !== null && _a !== void 0 ? _a : '';
        message.architecture = (_b = object.architecture) !== null && _b !== void 0 ? _b : '';
        message.skipPreUninstall = (_c = object.skipPreUninstall) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBasePlatformUninstallResponse() {
    return { taskProgress: undefined };
}
exports.PlatformUninstallResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.taskProgress !== undefined) {
            common_1.TaskProgress.encode(message.taskProgress, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformUninstallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.taskProgress = common_1.TaskProgress.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            taskProgress: isSet(object.taskProgress)
                ? common_1.TaskProgress.fromJSON(object.taskProgress)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.taskProgress !== undefined &&
            (obj.taskProgress = message.taskProgress
                ? common_1.TaskProgress.toJSON(message.taskProgress)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.PlatformUninstallResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBasePlatformUninstallResponse();
        message.taskProgress =
            object.taskProgress !== undefined && object.taskProgress !== null
                ? common_1.TaskProgress.fromPartial(object.taskProgress)
                : undefined;
        return message;
    },
};
function createBaseAlreadyAtLatestVersionError() {
    return {};
}
exports.AlreadyAtLatestVersionError = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAlreadyAtLatestVersionError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AlreadyAtLatestVersionError.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAlreadyAtLatestVersionError();
        return message;
    },
};
function createBasePlatformUpgradeRequest() {
    return {
        instance: undefined,
        platformPackage: '',
        architecture: '',
        skipPostInstall: false,
        skipPreUninstall: false,
    };
}
exports.PlatformUpgradeRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.platformPackage !== '') {
            writer.uint32(18).string(message.platformPackage);
        }
        if (message.architecture !== '') {
            writer.uint32(26).string(message.architecture);
        }
        if (message.skipPostInstall === true) {
            writer.uint32(32).bool(message.skipPostInstall);
        }
        if (message.skipPreUninstall === true) {
            writer.uint32(40).bool(message.skipPreUninstall);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformUpgradeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.platformPackage = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.architecture = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.skipPostInstall = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.skipPreUninstall = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            platformPackage: isSet(object.platformPackage)
                ? String(object.platformPackage)
                : '',
            architecture: isSet(object.architecture)
                ? String(object.architecture)
                : '',
            skipPostInstall: isSet(object.skipPostInstall)
                ? Boolean(object.skipPostInstall)
                : false,
            skipPreUninstall: isSet(object.skipPreUninstall)
                ? Boolean(object.skipPreUninstall)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.platformPackage !== undefined &&
            (obj.platformPackage = message.platformPackage);
        message.architecture !== undefined &&
            (obj.architecture = message.architecture);
        message.skipPostInstall !== undefined &&
            (obj.skipPostInstall = message.skipPostInstall);
        message.skipPreUninstall !== undefined &&
            (obj.skipPreUninstall = message.skipPreUninstall);
        return obj;
    },
    create(base) {
        return exports.PlatformUpgradeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBasePlatformUpgradeRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.platformPackage = (_a = object.platformPackage) !== null && _a !== void 0 ? _a : '';
        message.architecture = (_b = object.architecture) !== null && _b !== void 0 ? _b : '';
        message.skipPostInstall = (_c = object.skipPostInstall) !== null && _c !== void 0 ? _c : false;
        message.skipPreUninstall = (_d = object.skipPreUninstall) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBasePlatformUpgradeResponse() {
    return {
        progress: undefined,
        taskProgress: undefined,
        platform: undefined,
    };
}
exports.PlatformUpgradeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.progress !== undefined) {
            common_1.DownloadProgress.encode(message.progress, writer.uint32(10).fork()).ldelim();
        }
        if (message.taskProgress !== undefined) {
            common_1.TaskProgress.encode(message.taskProgress, writer.uint32(18).fork()).ldelim();
        }
        if (message.platform !== undefined) {
            common_1.Platform.encode(message.platform, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformUpgradeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.progress = common_1.DownloadProgress.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.taskProgress = common_1.TaskProgress.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.platform = common_1.Platform.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            progress: isSet(object.progress)
                ? common_1.DownloadProgress.fromJSON(object.progress)
                : undefined,
            taskProgress: isSet(object.taskProgress)
                ? common_1.TaskProgress.fromJSON(object.taskProgress)
                : undefined,
            platform: isSet(object.platform)
                ? common_1.Platform.fromJSON(object.platform)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.progress !== undefined &&
            (obj.progress = message.progress
                ? common_1.DownloadProgress.toJSON(message.progress)
                : undefined);
        message.taskProgress !== undefined &&
            (obj.taskProgress = message.taskProgress
                ? common_1.TaskProgress.toJSON(message.taskProgress)
                : undefined);
        message.platform !== undefined &&
            (obj.platform = message.platform
                ? common_1.Platform.toJSON(message.platform)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.PlatformUpgradeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBasePlatformUpgradeResponse();
        message.progress =
            object.progress !== undefined && object.progress !== null
                ? common_1.DownloadProgress.fromPartial(object.progress)
                : undefined;
        message.taskProgress =
            object.taskProgress !== undefined && object.taskProgress !== null
                ? common_1.TaskProgress.fromPartial(object.taskProgress)
                : undefined;
        message.platform =
            object.platform !== undefined && object.platform !== null
                ? common_1.Platform.fromPartial(object.platform)
                : undefined;
        return message;
    },
};
function createBasePlatformSearchRequest() {
    return { instance: undefined, searchArgs: '', allVersions: false };
}
exports.PlatformSearchRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.searchArgs !== '') {
            writer.uint32(18).string(message.searchArgs);
        }
        if (message.allVersions === true) {
            writer.uint32(24).bool(message.allVersions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformSearchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.searchArgs = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.allVersions = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            searchArgs: isSet(object.searchArgs)
                ? String(object.searchArgs)
                : '',
            allVersions: isSet(object.allVersions)
                ? Boolean(object.allVersions)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.searchArgs !== undefined &&
            (obj.searchArgs = message.searchArgs);
        message.allVersions !== undefined &&
            (obj.allVersions = message.allVersions);
        return obj;
    },
    create(base) {
        return exports.PlatformSearchRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePlatformSearchRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.searchArgs = (_a = object.searchArgs) !== null && _a !== void 0 ? _a : '';
        message.allVersions = (_b = object.allVersions) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBasePlatformSearchResponse() {
    return { searchOutput: [] };
}
exports.PlatformSearchResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.searchOutput) {
            common_1.Platform.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformSearchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.searchOutput.push(common_1.Platform.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            searchOutput: Array.isArray(object === null || object === void 0 ? void 0 : object.searchOutput)
                ? object.searchOutput.map((e) => common_1.Platform.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.searchOutput) {
            obj.searchOutput = message.searchOutput.map((e) => e ? common_1.Platform.toJSON(e) : undefined);
        }
        else {
            obj.searchOutput = [];
        }
        return obj;
    },
    create(base) {
        return exports.PlatformSearchResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePlatformSearchResponse();
        message.searchOutput =
            ((_a = object.searchOutput) === null || _a === void 0 ? void 0 : _a.map((e) => common_1.Platform.fromPartial(e))) || [];
        return message;
    },
};
function createBasePlatformListRequest() {
    return { instance: undefined, updatableOnly: false, all: false };
}
exports.PlatformListRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.updatableOnly === true) {
            writer.uint32(16).bool(message.updatableOnly);
        }
        if (message.all === true) {
            writer.uint32(24).bool(message.all);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformListRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.updatableOnly = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.all = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            updatableOnly: isSet(object.updatableOnly)
                ? Boolean(object.updatableOnly)
                : false,
            all: isSet(object.all) ? Boolean(object.all) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.updatableOnly !== undefined &&
            (obj.updatableOnly = message.updatableOnly);
        message.all !== undefined && (obj.all = message.all);
        return obj;
    },
    create(base) {
        return exports.PlatformListRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePlatformListRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.updatableOnly = (_a = object.updatableOnly) !== null && _a !== void 0 ? _a : false;
        message.all = (_b = object.all) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBasePlatformListResponse() {
    return { installedPlatforms: [] };
}
exports.PlatformListResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.installedPlatforms) {
            common_1.Platform.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatformListResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.installedPlatforms.push(common_1.Platform.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            installedPlatforms: Array.isArray(object === null || object === void 0 ? void 0 : object.installedPlatforms)
                ? object.installedPlatforms.map((e) => common_1.Platform.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.installedPlatforms) {
            obj.installedPlatforms = message.installedPlatforms.map((e) => e ? common_1.Platform.toJSON(e) : undefined);
        }
        else {
            obj.installedPlatforms = [];
        }
        return obj;
    },
    create(base) {
        return exports.PlatformListResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePlatformListResponse();
        message.installedPlatforms =
            ((_a = object.installedPlatforms) === null || _a === void 0 ? void 0 : _a.map((e) => common_1.Platform.fromPartial(e))) ||
                [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
