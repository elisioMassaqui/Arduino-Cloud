"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpResources = exports.Profile = exports.Board = exports.InstalledPlatformReference = exports.Platform = exports.MissingProgrammerError = exports.Programmer = exports.TaskProgress = exports.DownloadProgressEnd = exports.DownloadProgressUpdate = exports.DownloadProgressStart = exports.DownloadProgress = exports.Instance = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseInstance() {
    return { id: 0 };
}
exports.Instance = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInstance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? Number(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        return obj;
    },
    create(base) {
        return exports.Instance.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInstance();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseDownloadProgress() {
    return { message: undefined };
}
exports.DownloadProgress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        var _a;
        switch ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) {
            case 'start':
                exports.DownloadProgressStart.encode(message.message.start, writer.uint32(10).fork()).ldelim();
                break;
            case 'update':
                exports.DownloadProgressUpdate.encode(message.message.update, writer.uint32(18).fork()).ldelim();
                break;
            case 'end':
                exports.DownloadProgressEnd.encode(message.message.end, writer.uint32(26).fork()).ldelim();
                break;
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDownloadProgress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = {
                        $case: 'start',
                        start: exports.DownloadProgressStart.decode(reader, reader.uint32()),
                    };
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = {
                        $case: 'update',
                        update: exports.DownloadProgressUpdate.decode(reader, reader.uint32()),
                    };
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = {
                        $case: 'end',
                        end: exports.DownloadProgressEnd.decode(reader, reader.uint32()),
                    };
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.start)
                ? {
                    $case: 'start',
                    start: exports.DownloadProgressStart.fromJSON(object.start),
                }
                : isSet(object.update)
                    ? {
                        $case: 'update',
                        update: exports.DownloadProgressUpdate.fromJSON(object.update),
                    }
                    : isSet(object.end)
                        ? {
                            $case: 'end',
                            end: exports.DownloadProgressEnd.fromJSON(object.end),
                        }
                        : undefined,
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const obj = {};
        ((_a = message.message) === null || _a === void 0 ? void 0 : _a.$case) === 'start' &&
            (obj.start = ((_b = message.message) === null || _b === void 0 ? void 0 : _b.start)
                ? exports.DownloadProgressStart.toJSON((_c = message.message) === null || _c === void 0 ? void 0 : _c.start)
                : undefined);
        ((_d = message.message) === null || _d === void 0 ? void 0 : _d.$case) === 'update' &&
            (obj.update = ((_e = message.message) === null || _e === void 0 ? void 0 : _e.update)
                ? exports.DownloadProgressUpdate.toJSON((_f = message.message) === null || _f === void 0 ? void 0 : _f.update)
                : undefined);
        ((_g = message.message) === null || _g === void 0 ? void 0 : _g.$case) === 'end' &&
            (obj.end = ((_h = message.message) === null || _h === void 0 ? void 0 : _h.end)
                ? exports.DownloadProgressEnd.toJSON((_j = message.message) === null || _j === void 0 ? void 0 : _j.end)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.DownloadProgress.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseDownloadProgress();
        if (((_a = object.message) === null || _a === void 0 ? void 0 : _a.$case) === 'start' &&
            ((_b = object.message) === null || _b === void 0 ? void 0 : _b.start) !== undefined &&
            ((_c = object.message) === null || _c === void 0 ? void 0 : _c.start) !== null) {
            message.message = {
                $case: 'start',
                start: exports.DownloadProgressStart.fromPartial(object.message.start),
            };
        }
        if (((_d = object.message) === null || _d === void 0 ? void 0 : _d.$case) === 'update' &&
            ((_e = object.message) === null || _e === void 0 ? void 0 : _e.update) !== undefined &&
            ((_f = object.message) === null || _f === void 0 ? void 0 : _f.update) !== null) {
            message.message = {
                $case: 'update',
                update: exports.DownloadProgressUpdate.fromPartial(object.message.update),
            };
        }
        if (((_g = object.message) === null || _g === void 0 ? void 0 : _g.$case) === 'end' &&
            ((_h = object.message) === null || _h === void 0 ? void 0 : _h.end) !== undefined &&
            ((_j = object.message) === null || _j === void 0 ? void 0 : _j.end) !== null) {
            message.message = {
                $case: 'end',
                end: exports.DownloadProgressEnd.fromPartial(object.message.end),
            };
        }
        return message;
    },
};
function createBaseDownloadProgressStart() {
    return { url: '', label: '' };
}
exports.DownloadProgressStart = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== '') {
            writer.uint32(10).string(message.url);
        }
        if (message.label !== '') {
            writer.uint32(18).string(message.label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDownloadProgressStart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? String(object.url) : '',
            label: isSet(object.label) ? String(object.label) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        message.label !== undefined && (obj.label = message.label);
        return obj;
    },
    create(base) {
        return exports.DownloadProgressStart.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDownloadProgressStart();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : '';
        message.label = (_b = object.label) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseDownloadProgressUpdate() {
    return { downloaded: 0, totalSize: 0 };
}
exports.DownloadProgressUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.downloaded !== 0) {
            writer.uint32(8).int64(message.downloaded);
        }
        if (message.totalSize !== 0) {
            writer.uint32(16).int64(message.totalSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDownloadProgressUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.downloaded = longToNumber(reader.int64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.totalSize = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            downloaded: isSet(object.downloaded)
                ? Number(object.downloaded)
                : 0,
            totalSize: isSet(object.totalSize) ? Number(object.totalSize) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.downloaded !== undefined &&
            (obj.downloaded = Math.round(message.downloaded));
        message.totalSize !== undefined &&
            (obj.totalSize = Math.round(message.totalSize));
        return obj;
    },
    create(base) {
        return exports.DownloadProgressUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDownloadProgressUpdate();
        message.downloaded = (_a = object.downloaded) !== null && _a !== void 0 ? _a : 0;
        message.totalSize = (_b = object.totalSize) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseDownloadProgressEnd() {
    return { success: false, message: '' };
}
exports.DownloadProgressEnd = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        if (message.message !== '') {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDownloadProgressEnd();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            message: isSet(object.message) ? String(object.message) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.success !== undefined && (obj.success = message.success);
        message.message !== undefined && (obj.message = message.message);
        return obj;
    },
    create(base) {
        return exports.DownloadProgressEnd.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDownloadProgressEnd();
        message.success = (_a = object.success) !== null && _a !== void 0 ? _a : false;
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseTaskProgress() {
    return { name: '', message: '', completed: false, percent: 0 };
}
exports.TaskProgress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== '') {
            writer.uint32(10).string(message.name);
        }
        if (message.message !== '') {
            writer.uint32(18).string(message.message);
        }
        if (message.completed === true) {
            writer.uint32(24).bool(message.completed);
        }
        if (message.percent !== 0) {
            writer.uint32(37).float(message.percent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTaskProgress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.completed = reader.bool();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.percent = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : '',
            message: isSet(object.message) ? String(object.message) : '',
            completed: isSet(object.completed)
                ? Boolean(object.completed)
                : false,
            percent: isSet(object.percent) ? Number(object.percent) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.message !== undefined && (obj.message = message.message);
        message.completed !== undefined && (obj.completed = message.completed);
        message.percent !== undefined && (obj.percent = message.percent);
        return obj;
    },
    create(base) {
        return exports.TaskProgress.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTaskProgress();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : '';
        message.message = (_b = object.message) !== null && _b !== void 0 ? _b : '';
        message.completed = (_c = object.completed) !== null && _c !== void 0 ? _c : false;
        message.percent = (_d = object.percent) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseProgrammer() {
    return { platform: '', id: '', name: '' };
}
exports.Programmer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.platform !== '') {
            writer.uint32(10).string(message.platform);
        }
        if (message.id !== '') {
            writer.uint32(18).string(message.id);
        }
        if (message.name !== '') {
            writer.uint32(26).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProgrammer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.platform = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            platform: isSet(object.platform) ? String(object.platform) : '',
            id: isSet(object.id) ? String(object.id) : '',
            name: isSet(object.name) ? String(object.name) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.platform !== undefined && (obj.platform = message.platform);
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    create(base) {
        return exports.Programmer.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseProgrammer();
        message.platform = (_a = object.platform) !== null && _a !== void 0 ? _a : '';
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : '';
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : '';
        return message;
    },
};
function createBaseMissingProgrammerError() {
    return {};
}
exports.MissingProgrammerError = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMissingProgrammerError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MissingProgrammerError.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMissingProgrammerError();
        return message;
    },
};
function createBasePlatform() {
    return {
        id: '',
        installed: '',
        latest: '',
        name: '',
        maintainer: '',
        website: '',
        email: '',
        boards: [],
        manuallyInstalled: false,
        deprecated: false,
        type: [],
        help: undefined,
        indexed: false,
        missingMetadata: false,
    };
}
exports.Platform = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        if (message.installed !== '') {
            writer.uint32(18).string(message.installed);
        }
        if (message.latest !== '') {
            writer.uint32(26).string(message.latest);
        }
        if (message.name !== '') {
            writer.uint32(34).string(message.name);
        }
        if (message.maintainer !== '') {
            writer.uint32(42).string(message.maintainer);
        }
        if (message.website !== '') {
            writer.uint32(50).string(message.website);
        }
        if (message.email !== '') {
            writer.uint32(58).string(message.email);
        }
        for (const v of message.boards) {
            exports.Board.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.manuallyInstalled === true) {
            writer.uint32(72).bool(message.manuallyInstalled);
        }
        if (message.deprecated === true) {
            writer.uint32(80).bool(message.deprecated);
        }
        for (const v of message.type) {
            writer.uint32(90).string(v);
        }
        if (message.help !== undefined) {
            exports.HelpResources.encode(message.help, writer.uint32(98).fork()).ldelim();
        }
        if (message.indexed === true) {
            writer.uint32(104).bool(message.indexed);
        }
        if (message.missingMetadata === true) {
            writer.uint32(112).bool(message.missingMetadata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlatform();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.installed = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.latest = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.maintainer = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.website = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.boards.push(exports.Board.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.manuallyInstalled = reader.bool();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.deprecated = reader.bool();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.type.push(reader.string());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.help = exports.HelpResources.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.indexed = reader.bool();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.missingMetadata = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : '',
            installed: isSet(object.installed) ? String(object.installed) : '',
            latest: isSet(object.latest) ? String(object.latest) : '',
            name: isSet(object.name) ? String(object.name) : '',
            maintainer: isSet(object.maintainer)
                ? String(object.maintainer)
                : '',
            website: isSet(object.website) ? String(object.website) : '',
            email: isSet(object.email) ? String(object.email) : '',
            boards: Array.isArray(object === null || object === void 0 ? void 0 : object.boards)
                ? object.boards.map((e) => exports.Board.fromJSON(e))
                : [],
            manuallyInstalled: isSet(object.manuallyInstalled)
                ? Boolean(object.manuallyInstalled)
                : false,
            deprecated: isSet(object.deprecated)
                ? Boolean(object.deprecated)
                : false,
            type: Array.isArray(object === null || object === void 0 ? void 0 : object.type)
                ? object.type.map((e) => String(e))
                : [],
            help: isSet(object.help)
                ? exports.HelpResources.fromJSON(object.help)
                : undefined,
            indexed: isSet(object.indexed) ? Boolean(object.indexed) : false,
            missingMetadata: isSet(object.missingMetadata)
                ? Boolean(object.missingMetadata)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.installed !== undefined && (obj.installed = message.installed);
        message.latest !== undefined && (obj.latest = message.latest);
        message.name !== undefined && (obj.name = message.name);
        message.maintainer !== undefined &&
            (obj.maintainer = message.maintainer);
        message.website !== undefined && (obj.website = message.website);
        message.email !== undefined && (obj.email = message.email);
        if (message.boards) {
            obj.boards = message.boards.map((e) => e ? exports.Board.toJSON(e) : undefined);
        }
        else {
            obj.boards = [];
        }
        message.manuallyInstalled !== undefined &&
            (obj.manuallyInstalled = message.manuallyInstalled);
        message.deprecated !== undefined &&
            (obj.deprecated = message.deprecated);
        if (message.type) {
            obj.type = message.type.map((e) => e);
        }
        else {
            obj.type = [];
        }
        message.help !== undefined &&
            (obj.help = message.help
                ? exports.HelpResources.toJSON(message.help)
                : undefined);
        message.indexed !== undefined && (obj.indexed = message.indexed);
        message.missingMetadata !== undefined &&
            (obj.missingMetadata = message.missingMetadata);
        return obj;
    },
    create(base) {
        return exports.Platform.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBasePlatform();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
        message.installed = (_b = object.installed) !== null && _b !== void 0 ? _b : '';
        message.latest = (_c = object.latest) !== null && _c !== void 0 ? _c : '';
        message.name = (_d = object.name) !== null && _d !== void 0 ? _d : '';
        message.maintainer = (_e = object.maintainer) !== null && _e !== void 0 ? _e : '';
        message.website = (_f = object.website) !== null && _f !== void 0 ? _f : '';
        message.email = (_g = object.email) !== null && _g !== void 0 ? _g : '';
        message.boards = ((_h = object.boards) === null || _h === void 0 ? void 0 : _h.map((e) => exports.Board.fromPartial(e))) || [];
        message.manuallyInstalled = (_j = object.manuallyInstalled) !== null && _j !== void 0 ? _j : false;
        message.deprecated = (_k = object.deprecated) !== null && _k !== void 0 ? _k : false;
        message.type = ((_l = object.type) === null || _l === void 0 ? void 0 : _l.map((e) => e)) || [];
        message.help =
            object.help !== undefined && object.help !== null
                ? exports.HelpResources.fromPartial(object.help)
                : undefined;
        message.indexed = (_m = object.indexed) !== null && _m !== void 0 ? _m : false;
        message.missingMetadata = (_o = object.missingMetadata) !== null && _o !== void 0 ? _o : false;
        return message;
    },
};
function createBaseInstalledPlatformReference() {
    return { id: '', version: '', installDir: '', packageUrl: '' };
}
exports.InstalledPlatformReference = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        if (message.version !== '') {
            writer.uint32(18).string(message.version);
        }
        if (message.installDir !== '') {
            writer.uint32(26).string(message.installDir);
        }
        if (message.packageUrl !== '') {
            writer.uint32(34).string(message.packageUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInstalledPlatformReference();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.installDir = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.packageUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : '',
            version: isSet(object.version) ? String(object.version) : '',
            installDir: isSet(object.installDir)
                ? String(object.installDir)
                : '',
            packageUrl: isSet(object.packageUrl)
                ? String(object.packageUrl)
                : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.version !== undefined && (obj.version = message.version);
        message.installDir !== undefined &&
            (obj.installDir = message.installDir);
        message.packageUrl !== undefined &&
            (obj.packageUrl = message.packageUrl);
        return obj;
    },
    create(base) {
        return exports.InstalledPlatformReference.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseInstalledPlatformReference();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : '';
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : '';
        message.installDir = (_c = object.installDir) !== null && _c !== void 0 ? _c : '';
        message.packageUrl = (_d = object.packageUrl) !== null && _d !== void 0 ? _d : '';
        return message;
    },
};
function createBaseBoard() {
    return { name: '', fqbn: '' };
}
exports.Board = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== '') {
            writer.uint32(10).string(message.name);
        }
        if (message.fqbn !== '') {
            writer.uint32(18).string(message.fqbn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBoard();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fqbn = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : '',
            fqbn: isSet(object.fqbn) ? String(object.fqbn) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.fqbn !== undefined && (obj.fqbn = message.fqbn);
        return obj;
    },
    create(base) {
        return exports.Board.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBoard();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : '';
        message.fqbn = (_b = object.fqbn) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseProfile() {
    return { name: '', fqbn: '' };
}
exports.Profile = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== '') {
            writer.uint32(10).string(message.name);
        }
        if (message.fqbn !== '') {
            writer.uint32(18).string(message.fqbn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProfile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fqbn = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : '',
            fqbn: isSet(object.fqbn) ? String(object.fqbn) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.fqbn !== undefined && (obj.fqbn = message.fqbn);
        return obj;
    },
    create(base) {
        return exports.Profile.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseProfile();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : '';
        message.fqbn = (_b = object.fqbn) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseHelpResources() {
    return { online: '' };
}
exports.HelpResources = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.online !== '') {
            writer.uint32(10).string(message.online);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHelpResources();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.online = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { online: isSet(object.online) ? String(object.online) : '' };
    },
    toJSON(message) {
        const obj = {};
        message.online !== undefined && (obj.online = message.online);
        return obj;
    },
    create(base) {
        return exports.HelpResources.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseHelpResources();
        message.online = (_a = object.online) !== null && _a !== void 0 ? _a : '';
        return message;
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    throw 'Unable to locate global object';
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
