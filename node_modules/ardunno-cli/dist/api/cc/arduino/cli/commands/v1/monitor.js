"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorPortSettingDescriptor = exports.EnumerateMonitorPortSettingsResponse = exports.EnumerateMonitorPortSettingsRequest = exports.MonitorPortSetting = exports.MonitorResponse = exports.MonitorPortConfiguration = exports.MonitorRequest = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const common_1 = require("./common");
const port_1 = require("./port");
function createBaseMonitorRequest() {
    return {
        instance: undefined,
        port: undefined,
        fqbn: '',
        txData: new Uint8Array(0),
        portConfiguration: undefined,
    };
}
exports.MonitorRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.port !== undefined) {
            port_1.Port.encode(message.port, writer.uint32(18).fork()).ldelim();
        }
        if (message.fqbn !== '') {
            writer.uint32(26).string(message.fqbn);
        }
        if (message.txData.length !== 0) {
            writer.uint32(34).bytes(message.txData);
        }
        if (message.portConfiguration !== undefined) {
            exports.MonitorPortConfiguration.encode(message.portConfiguration, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMonitorRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.port = port_1.Port.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fqbn = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.txData = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.portConfiguration = exports.MonitorPortConfiguration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            port: isSet(object.port) ? port_1.Port.fromJSON(object.port) : undefined,
            fqbn: isSet(object.fqbn) ? String(object.fqbn) : '',
            txData: isSet(object.txData)
                ? bytesFromBase64(object.txData)
                : new Uint8Array(0),
            portConfiguration: isSet(object.portConfiguration)
                ? exports.MonitorPortConfiguration.fromJSON(object.portConfiguration)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.port !== undefined &&
            (obj.port = message.port ? port_1.Port.toJSON(message.port) : undefined);
        message.fqbn !== undefined && (obj.fqbn = message.fqbn);
        message.txData !== undefined &&
            (obj.txData = base64FromBytes(message.txData !== undefined
                ? message.txData
                : new Uint8Array(0)));
        message.portConfiguration !== undefined &&
            (obj.portConfiguration = message.portConfiguration
                ? exports.MonitorPortConfiguration.toJSON(message.portConfiguration)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.MonitorRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMonitorRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.port =
            object.port !== undefined && object.port !== null
                ? port_1.Port.fromPartial(object.port)
                : undefined;
        message.fqbn = (_a = object.fqbn) !== null && _a !== void 0 ? _a : '';
        message.txData = (_b = object.txData) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.portConfiguration =
            object.portConfiguration !== undefined &&
                object.portConfiguration !== null
                ? exports.MonitorPortConfiguration.fromPartial(object.portConfiguration)
                : undefined;
        return message;
    },
};
function createBaseMonitorPortConfiguration() {
    return { settings: [] };
}
exports.MonitorPortConfiguration = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.settings) {
            exports.MonitorPortSetting.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMonitorPortConfiguration();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.settings.push(exports.MonitorPortSetting.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            settings: Array.isArray(object === null || object === void 0 ? void 0 : object.settings)
                ? object.settings.map((e) => exports.MonitorPortSetting.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.settings) {
            obj.settings = message.settings.map((e) => e ? exports.MonitorPortSetting.toJSON(e) : undefined);
        }
        else {
            obj.settings = [];
        }
        return obj;
    },
    create(base) {
        return exports.MonitorPortConfiguration.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMonitorPortConfiguration();
        message.settings =
            ((_a = object.settings) === null || _a === void 0 ? void 0 : _a.map((e) => exports.MonitorPortSetting.fromPartial(e))) ||
                [];
        return message;
    },
};
function createBaseMonitorResponse() {
    return {
        error: '',
        rxData: new Uint8Array(0),
        appliedSettings: [],
        success: false,
    };
}
exports.MonitorResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.error !== '') {
            writer.uint32(10).string(message.error);
        }
        if (message.rxData.length !== 0) {
            writer.uint32(18).bytes(message.rxData);
        }
        for (const v of message.appliedSettings) {
            exports.MonitorPortSetting.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.success === true) {
            writer.uint32(32).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMonitorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rxData = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.appliedSettings.push(exports.MonitorPortSetting.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            error: isSet(object.error) ? String(object.error) : '',
            rxData: isSet(object.rxData)
                ? bytesFromBase64(object.rxData)
                : new Uint8Array(0),
            appliedSettings: Array.isArray(object === null || object === void 0 ? void 0 : object.appliedSettings)
                ? object.appliedSettings.map((e) => exports.MonitorPortSetting.fromJSON(e))
                : [],
            success: isSet(object.success) ? Boolean(object.success) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.error !== undefined && (obj.error = message.error);
        message.rxData !== undefined &&
            (obj.rxData = base64FromBytes(message.rxData !== undefined
                ? message.rxData
                : new Uint8Array(0)));
        if (message.appliedSettings) {
            obj.appliedSettings = message.appliedSettings.map((e) => e ? exports.MonitorPortSetting.toJSON(e) : undefined);
        }
        else {
            obj.appliedSettings = [];
        }
        message.success !== undefined && (obj.success = message.success);
        return obj;
    },
    create(base) {
        return exports.MonitorResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMonitorResponse();
        message.error = (_a = object.error) !== null && _a !== void 0 ? _a : '';
        message.rxData = (_b = object.rxData) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.appliedSettings =
            ((_c = object.appliedSettings) === null || _c === void 0 ? void 0 : _c.map((e) => exports.MonitorPortSetting.fromPartial(e))) || [];
        message.success = (_d = object.success) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseMonitorPortSetting() {
    return { settingId: '', value: '' };
}
exports.MonitorPortSetting = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.settingId !== '') {
            writer.uint32(10).string(message.settingId);
        }
        if (message.value !== '') {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMonitorPortSetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.settingId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            settingId: isSet(object.settingId) ? String(object.settingId) : '',
            value: isSet(object.value) ? String(object.value) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.settingId !== undefined && (obj.settingId = message.settingId);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return exports.MonitorPortSetting.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMonitorPortSetting();
        message.settingId = (_a = object.settingId) !== null && _a !== void 0 ? _a : '';
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseEnumerateMonitorPortSettingsRequest() {
    return { instance: undefined, portProtocol: '', fqbn: '' };
}
exports.EnumerateMonitorPortSettingsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.portProtocol !== '') {
            writer.uint32(18).string(message.portProtocol);
        }
        if (message.fqbn !== '') {
            writer.uint32(26).string(message.fqbn);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnumerateMonitorPortSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.portProtocol = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.fqbn = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            portProtocol: isSet(object.portProtocol)
                ? String(object.portProtocol)
                : '',
            fqbn: isSet(object.fqbn) ? String(object.fqbn) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.portProtocol !== undefined &&
            (obj.portProtocol = message.portProtocol);
        message.fqbn !== undefined && (obj.fqbn = message.fqbn);
        return obj;
    },
    create(base) {
        return exports.EnumerateMonitorPortSettingsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEnumerateMonitorPortSettingsRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.portProtocol = (_a = object.portProtocol) !== null && _a !== void 0 ? _a : '';
        message.fqbn = (_b = object.fqbn) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseEnumerateMonitorPortSettingsResponse() {
    return { settings: [] };
}
exports.EnumerateMonitorPortSettingsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.settings) {
            exports.MonitorPortSettingDescriptor.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnumerateMonitorPortSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.settings.push(exports.MonitorPortSettingDescriptor.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            settings: Array.isArray(object === null || object === void 0 ? void 0 : object.settings)
                ? object.settings.map((e) => exports.MonitorPortSettingDescriptor.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.settings) {
            obj.settings = message.settings.map((e) => e ? exports.MonitorPortSettingDescriptor.toJSON(e) : undefined);
        }
        else {
            obj.settings = [];
        }
        return obj;
    },
    create(base) {
        return exports.EnumerateMonitorPortSettingsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEnumerateMonitorPortSettingsResponse();
        message.settings =
            ((_a = object.settings) === null || _a === void 0 ? void 0 : _a.map((e) => exports.MonitorPortSettingDescriptor.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMonitorPortSettingDescriptor() {
    return { settingId: '', label: '', type: '', enumValues: [], value: '' };
}
exports.MonitorPortSettingDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.settingId !== '') {
            writer.uint32(10).string(message.settingId);
        }
        if (message.label !== '') {
            writer.uint32(18).string(message.label);
        }
        if (message.type !== '') {
            writer.uint32(26).string(message.type);
        }
        for (const v of message.enumValues) {
            writer.uint32(34).string(v);
        }
        if (message.value !== '') {
            writer.uint32(42).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMonitorPortSettingDescriptor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.settingId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.enumValues.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            settingId: isSet(object.settingId) ? String(object.settingId) : '',
            label: isSet(object.label) ? String(object.label) : '',
            type: isSet(object.type) ? String(object.type) : '',
            enumValues: Array.isArray(object === null || object === void 0 ? void 0 : object.enumValues)
                ? object.enumValues.map((e) => String(e))
                : [],
            value: isSet(object.value) ? String(object.value) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.settingId !== undefined && (obj.settingId = message.settingId);
        message.label !== undefined && (obj.label = message.label);
        message.type !== undefined && (obj.type = message.type);
        if (message.enumValues) {
            obj.enumValues = message.enumValues.map((e) => e);
        }
        else {
            obj.enumValues = [];
        }
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return exports.MonitorPortSettingDescriptor.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseMonitorPortSettingDescriptor();
        message.settingId = (_a = object.settingId) !== null && _a !== void 0 ? _a : '';
        message.label = (_b = object.label) !== null && _b !== void 0 ? _b : '';
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : '';
        message.enumValues = ((_d = object.enumValues) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.value = (_e = object.value) !== null && _e !== void 0 ? _e : '';
        return message;
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    throw 'Unable to locate global object';
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, 'base64'));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString('base64');
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(''));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
