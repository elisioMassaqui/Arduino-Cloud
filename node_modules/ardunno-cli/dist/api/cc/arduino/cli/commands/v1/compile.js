"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutableSectionSize = exports.CompileResponse = exports.CompileRequest_SourceOverrideEntry = exports.CompileRequest = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const wrappers_1 = require("../../../../../google/protobuf/wrappers");
const common_1 = require("./common");
const lib_1 = require("./lib");
function createBaseCompileRequest() {
    return {
        instance: undefined,
        fqbn: '',
        sketchPath: '',
        showProperties: false,
        preprocess: false,
        buildCachePath: '',
        buildPath: '',
        buildProperties: [],
        warnings: '',
        verbose: false,
        quiet: false,
        jobs: 0,
        libraries: [],
        optimizeForDebug: false,
        exportDir: '',
        clean: false,
        createCompilationDatabaseOnly: false,
        sourceOverride: {},
        exportBinaries: undefined,
        library: [],
        keysKeychain: '',
        signKey: '',
        encryptKey: '',
        skipLibrariesDiscovery: false,
        doNotExpandBuildProperties: false,
    };
}
exports.CompileRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.instance !== undefined) {
            common_1.Instance.encode(message.instance, writer.uint32(10).fork()).ldelim();
        }
        if (message.fqbn !== '') {
            writer.uint32(18).string(message.fqbn);
        }
        if (message.sketchPath !== '') {
            writer.uint32(26).string(message.sketchPath);
        }
        if (message.showProperties === true) {
            writer.uint32(32).bool(message.showProperties);
        }
        if (message.preprocess === true) {
            writer.uint32(40).bool(message.preprocess);
        }
        if (message.buildCachePath !== '') {
            writer.uint32(50).string(message.buildCachePath);
        }
        if (message.buildPath !== '') {
            writer.uint32(58).string(message.buildPath);
        }
        for (const v of message.buildProperties) {
            writer.uint32(66).string(v);
        }
        if (message.warnings !== '') {
            writer.uint32(74).string(message.warnings);
        }
        if (message.verbose === true) {
            writer.uint32(80).bool(message.verbose);
        }
        if (message.quiet === true) {
            writer.uint32(88).bool(message.quiet);
        }
        if (message.jobs !== 0) {
            writer.uint32(112).int32(message.jobs);
        }
        for (const v of message.libraries) {
            writer.uint32(122).string(v);
        }
        if (message.optimizeForDebug === true) {
            writer.uint32(128).bool(message.optimizeForDebug);
        }
        if (message.exportDir !== '') {
            writer.uint32(146).string(message.exportDir);
        }
        if (message.clean === true) {
            writer.uint32(152).bool(message.clean);
        }
        if (message.createCompilationDatabaseOnly === true) {
            writer.uint32(168).bool(message.createCompilationDatabaseOnly);
        }
        Object.entries(message.sourceOverride).forEach(([key, value]) => {
            exports.CompileRequest_SourceOverrideEntry.encode({ key: key, value }, writer.uint32(178).fork()).ldelim();
        });
        if (message.exportBinaries !== undefined) {
            wrappers_1.BoolValue.encode({ value: message.exportBinaries }, writer.uint32(186).fork()).ldelim();
        }
        for (const v of message.library) {
            writer.uint32(194).string(v);
        }
        if (message.keysKeychain !== '') {
            writer.uint32(202).string(message.keysKeychain);
        }
        if (message.signKey !== '') {
            writer.uint32(210).string(message.signKey);
        }
        if (message.encryptKey !== '') {
            writer.uint32(218).string(message.encryptKey);
        }
        if (message.skipLibrariesDiscovery === true) {
            writer.uint32(224).bool(message.skipLibrariesDiscovery);
        }
        if (message.doNotExpandBuildProperties === true) {
            writer.uint32(232).bool(message.doNotExpandBuildProperties);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = common_1.Instance.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fqbn = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sketchPath = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.showProperties = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.preprocess = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.buildCachePath = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buildPath = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.buildProperties.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.warnings = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.verbose = reader.bool();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.quiet = reader.bool();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.jobs = reader.int32();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.libraries.push(reader.string());
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.optimizeForDebug = reader.bool();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.exportDir = reader.string();
                    continue;
                case 19:
                    if (tag !== 152) {
                        break;
                    }
                    message.clean = reader.bool();
                    continue;
                case 21:
                    if (tag !== 168) {
                        break;
                    }
                    message.createCompilationDatabaseOnly = reader.bool();
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    const entry22 = exports.CompileRequest_SourceOverrideEntry.decode(reader, reader.uint32());
                    if (entry22.value !== undefined) {
                        message.sourceOverride[entry22.key] = entry22.value;
                    }
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.exportBinaries = wrappers_1.BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.library.push(reader.string());
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.keysKeychain = reader.string();
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.signKey = reader.string();
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.encryptKey = reader.string();
                    continue;
                case 28:
                    if (tag !== 224) {
                        break;
                    }
                    message.skipLibrariesDiscovery = reader.bool();
                    continue;
                case 29:
                    if (tag !== 232) {
                        break;
                    }
                    message.doNotExpandBuildProperties = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            instance: isSet(object.instance)
                ? common_1.Instance.fromJSON(object.instance)
                : undefined,
            fqbn: isSet(object.fqbn) ? String(object.fqbn) : '',
            sketchPath: isSet(object.sketchPath)
                ? String(object.sketchPath)
                : '',
            showProperties: isSet(object.showProperties)
                ? Boolean(object.showProperties)
                : false,
            preprocess: isSet(object.preprocess)
                ? Boolean(object.preprocess)
                : false,
            buildCachePath: isSet(object.buildCachePath)
                ? String(object.buildCachePath)
                : '',
            buildPath: isSet(object.buildPath) ? String(object.buildPath) : '',
            buildProperties: Array.isArray(object === null || object === void 0 ? void 0 : object.buildProperties)
                ? object.buildProperties.map((e) => String(e))
                : [],
            warnings: isSet(object.warnings) ? String(object.warnings) : '',
            verbose: isSet(object.verbose) ? Boolean(object.verbose) : false,
            quiet: isSet(object.quiet) ? Boolean(object.quiet) : false,
            jobs: isSet(object.jobs) ? Number(object.jobs) : 0,
            libraries: Array.isArray(object === null || object === void 0 ? void 0 : object.libraries)
                ? object.libraries.map((e) => String(e))
                : [],
            optimizeForDebug: isSet(object.optimizeForDebug)
                ? Boolean(object.optimizeForDebug)
                : false,
            exportDir: isSet(object.exportDir) ? String(object.exportDir) : '',
            clean: isSet(object.clean) ? Boolean(object.clean) : false,
            createCompilationDatabaseOnly: isSet(object.createCompilationDatabaseOnly)
                ? Boolean(object.createCompilationDatabaseOnly)
                : false,
            sourceOverride: isObject(object.sourceOverride)
                ? Object.entries(object.sourceOverride).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            exportBinaries: isSet(object.exportBinaries)
                ? Boolean(object.exportBinaries)
                : undefined,
            library: Array.isArray(object === null || object === void 0 ? void 0 : object.library)
                ? object.library.map((e) => String(e))
                : [],
            keysKeychain: isSet(object.keysKeychain)
                ? String(object.keysKeychain)
                : '',
            signKey: isSet(object.signKey) ? String(object.signKey) : '',
            encryptKey: isSet(object.encryptKey)
                ? String(object.encryptKey)
                : '',
            skipLibrariesDiscovery: isSet(object.skipLibrariesDiscovery)
                ? Boolean(object.skipLibrariesDiscovery)
                : false,
            doNotExpandBuildProperties: isSet(object.doNotExpandBuildProperties)
                ? Boolean(object.doNotExpandBuildProperties)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.instance !== undefined &&
            (obj.instance = message.instance
                ? common_1.Instance.toJSON(message.instance)
                : undefined);
        message.fqbn !== undefined && (obj.fqbn = message.fqbn);
        message.sketchPath !== undefined &&
            (obj.sketchPath = message.sketchPath);
        message.showProperties !== undefined &&
            (obj.showProperties = message.showProperties);
        message.preprocess !== undefined &&
            (obj.preprocess = message.preprocess);
        message.buildCachePath !== undefined &&
            (obj.buildCachePath = message.buildCachePath);
        message.buildPath !== undefined && (obj.buildPath = message.buildPath);
        if (message.buildProperties) {
            obj.buildProperties = message.buildProperties.map((e) => e);
        }
        else {
            obj.buildProperties = [];
        }
        message.warnings !== undefined && (obj.warnings = message.warnings);
        message.verbose !== undefined && (obj.verbose = message.verbose);
        message.quiet !== undefined && (obj.quiet = message.quiet);
        message.jobs !== undefined && (obj.jobs = Math.round(message.jobs));
        if (message.libraries) {
            obj.libraries = message.libraries.map((e) => e);
        }
        else {
            obj.libraries = [];
        }
        message.optimizeForDebug !== undefined &&
            (obj.optimizeForDebug = message.optimizeForDebug);
        message.exportDir !== undefined && (obj.exportDir = message.exportDir);
        message.clean !== undefined && (obj.clean = message.clean);
        message.createCompilationDatabaseOnly !== undefined &&
            (obj.createCompilationDatabaseOnly =
                message.createCompilationDatabaseOnly);
        obj.sourceOverride = {};
        if (message.sourceOverride) {
            Object.entries(message.sourceOverride).forEach(([k, v]) => {
                obj.sourceOverride[k] = v;
            });
        }
        message.exportBinaries !== undefined &&
            (obj.exportBinaries = message.exportBinaries);
        if (message.library) {
            obj.library = message.library.map((e) => e);
        }
        else {
            obj.library = [];
        }
        message.keysKeychain !== undefined &&
            (obj.keysKeychain = message.keysKeychain);
        message.signKey !== undefined && (obj.signKey = message.signKey);
        message.encryptKey !== undefined &&
            (obj.encryptKey = message.encryptKey);
        message.skipLibrariesDiscovery !== undefined &&
            (obj.skipLibrariesDiscovery = message.skipLibrariesDiscovery);
        message.doNotExpandBuildProperties !== undefined &&
            (obj.doNotExpandBuildProperties =
                message.doNotExpandBuildProperties);
        return obj;
    },
    create(base) {
        return exports.CompileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        const message = createBaseCompileRequest();
        message.instance =
            object.instance !== undefined && object.instance !== null
                ? common_1.Instance.fromPartial(object.instance)
                : undefined;
        message.fqbn = (_a = object.fqbn) !== null && _a !== void 0 ? _a : '';
        message.sketchPath = (_b = object.sketchPath) !== null && _b !== void 0 ? _b : '';
        message.showProperties = (_c = object.showProperties) !== null && _c !== void 0 ? _c : false;
        message.preprocess = (_d = object.preprocess) !== null && _d !== void 0 ? _d : false;
        message.buildCachePath = (_e = object.buildCachePath) !== null && _e !== void 0 ? _e : '';
        message.buildPath = (_f = object.buildPath) !== null && _f !== void 0 ? _f : '';
        message.buildProperties = ((_g = object.buildProperties) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.warnings = (_h = object.warnings) !== null && _h !== void 0 ? _h : '';
        message.verbose = (_j = object.verbose) !== null && _j !== void 0 ? _j : false;
        message.quiet = (_k = object.quiet) !== null && _k !== void 0 ? _k : false;
        message.jobs = (_l = object.jobs) !== null && _l !== void 0 ? _l : 0;
        message.libraries = ((_m = object.libraries) === null || _m === void 0 ? void 0 : _m.map((e) => e)) || [];
        message.optimizeForDebug = (_o = object.optimizeForDebug) !== null && _o !== void 0 ? _o : false;
        message.exportDir = (_p = object.exportDir) !== null && _p !== void 0 ? _p : '';
        message.clean = (_q = object.clean) !== null && _q !== void 0 ? _q : false;
        message.createCompilationDatabaseOnly =
            (_r = object.createCompilationDatabaseOnly) !== null && _r !== void 0 ? _r : false;
        message.sourceOverride = Object.entries((_s = object.sourceOverride) !== null && _s !== void 0 ? _s : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.exportBinaries = (_t = object.exportBinaries) !== null && _t !== void 0 ? _t : undefined;
        message.library = ((_u = object.library) === null || _u === void 0 ? void 0 : _u.map((e) => e)) || [];
        message.keysKeychain = (_v = object.keysKeychain) !== null && _v !== void 0 ? _v : '';
        message.signKey = (_w = object.signKey) !== null && _w !== void 0 ? _w : '';
        message.encryptKey = (_x = object.encryptKey) !== null && _x !== void 0 ? _x : '';
        message.skipLibrariesDiscovery = (_y = object.skipLibrariesDiscovery) !== null && _y !== void 0 ? _y : false;
        message.doNotExpandBuildProperties =
            (_z = object.doNotExpandBuildProperties) !== null && _z !== void 0 ? _z : false;
        return message;
    },
};
function createBaseCompileRequest_SourceOverrideEntry() {
    return { key: '', value: '' };
}
exports.CompileRequest_SourceOverrideEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== '') {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== '') {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompileRequest_SourceOverrideEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : '',
            value: isSet(object.value) ? String(object.value) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return exports.CompileRequest_SourceOverrideEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCompileRequest_SourceOverrideEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : '';
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : '';
        return message;
    },
};
function createBaseCompileResponse() {
    return {
        outStream: new Uint8Array(0),
        errStream: new Uint8Array(0),
        buildPath: '',
        usedLibraries: [],
        executableSectionsSize: [],
        boardPlatform: undefined,
        buildPlatform: undefined,
        progress: undefined,
        buildProperties: [],
    };
}
exports.CompileResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.outStream.length !== 0) {
            writer.uint32(10).bytes(message.outStream);
        }
        if (message.errStream.length !== 0) {
            writer.uint32(18).bytes(message.errStream);
        }
        if (message.buildPath !== '') {
            writer.uint32(26).string(message.buildPath);
        }
        for (const v of message.usedLibraries) {
            lib_1.Library.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.executableSectionsSize) {
            exports.ExecutableSectionSize.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.boardPlatform !== undefined) {
            common_1.InstalledPlatformReference.encode(message.boardPlatform, writer.uint32(50).fork()).ldelim();
        }
        if (message.buildPlatform !== undefined) {
            common_1.InstalledPlatformReference.encode(message.buildPlatform, writer.uint32(58).fork()).ldelim();
        }
        if (message.progress !== undefined) {
            common_1.TaskProgress.encode(message.progress, writer.uint32(66).fork()).ldelim();
        }
        for (const v of message.buildProperties) {
            writer.uint32(74).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.outStream = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errStream = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.buildPath = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.usedLibraries.push(lib_1.Library.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.executableSectionsSize.push(exports.ExecutableSectionSize.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.boardPlatform = common_1.InstalledPlatformReference.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buildPlatform = common_1.InstalledPlatformReference.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.progress = common_1.TaskProgress.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.buildProperties.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            outStream: isSet(object.outStream)
                ? bytesFromBase64(object.outStream)
                : new Uint8Array(0),
            errStream: isSet(object.errStream)
                ? bytesFromBase64(object.errStream)
                : new Uint8Array(0),
            buildPath: isSet(object.buildPath) ? String(object.buildPath) : '',
            usedLibraries: Array.isArray(object === null || object === void 0 ? void 0 : object.usedLibraries)
                ? object.usedLibraries.map((e) => lib_1.Library.fromJSON(e))
                : [],
            executableSectionsSize: Array.isArray(object === null || object === void 0 ? void 0 : object.executableSectionsSize)
                ? object.executableSectionsSize.map((e) => exports.ExecutableSectionSize.fromJSON(e))
                : [],
            boardPlatform: isSet(object.boardPlatform)
                ? common_1.InstalledPlatformReference.fromJSON(object.boardPlatform)
                : undefined,
            buildPlatform: isSet(object.buildPlatform)
                ? common_1.InstalledPlatformReference.fromJSON(object.buildPlatform)
                : undefined,
            progress: isSet(object.progress)
                ? common_1.TaskProgress.fromJSON(object.progress)
                : undefined,
            buildProperties: Array.isArray(object === null || object === void 0 ? void 0 : object.buildProperties)
                ? object.buildProperties.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.outStream !== undefined &&
            (obj.outStream = base64FromBytes(message.outStream !== undefined
                ? message.outStream
                : new Uint8Array(0)));
        message.errStream !== undefined &&
            (obj.errStream = base64FromBytes(message.errStream !== undefined
                ? message.errStream
                : new Uint8Array(0)));
        message.buildPath !== undefined && (obj.buildPath = message.buildPath);
        if (message.usedLibraries) {
            obj.usedLibraries = message.usedLibraries.map((e) => e ? lib_1.Library.toJSON(e) : undefined);
        }
        else {
            obj.usedLibraries = [];
        }
        if (message.executableSectionsSize) {
            obj.executableSectionsSize = message.executableSectionsSize.map((e) => (e ? exports.ExecutableSectionSize.toJSON(e) : undefined));
        }
        else {
            obj.executableSectionsSize = [];
        }
        message.boardPlatform !== undefined &&
            (obj.boardPlatform = message.boardPlatform
                ? common_1.InstalledPlatformReference.toJSON(message.boardPlatform)
                : undefined);
        message.buildPlatform !== undefined &&
            (obj.buildPlatform = message.buildPlatform
                ? common_1.InstalledPlatformReference.toJSON(message.buildPlatform)
                : undefined);
        message.progress !== undefined &&
            (obj.progress = message.progress
                ? common_1.TaskProgress.toJSON(message.progress)
                : undefined);
        if (message.buildProperties) {
            obj.buildProperties = message.buildProperties.map((e) => e);
        }
        else {
            obj.buildProperties = [];
        }
        return obj;
    },
    create(base) {
        return exports.CompileResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseCompileResponse();
        message.outStream = (_a = object.outStream) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.errStream = (_b = object.errStream) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.buildPath = (_c = object.buildPath) !== null && _c !== void 0 ? _c : '';
        message.usedLibraries =
            ((_d = object.usedLibraries) === null || _d === void 0 ? void 0 : _d.map((e) => lib_1.Library.fromPartial(e))) || [];
        message.executableSectionsSize =
            ((_e = object.executableSectionsSize) === null || _e === void 0 ? void 0 : _e.map((e) => exports.ExecutableSectionSize.fromPartial(e))) || [];
        message.boardPlatform =
            object.boardPlatform !== undefined && object.boardPlatform !== null
                ? common_1.InstalledPlatformReference.fromPartial(object.boardPlatform)
                : undefined;
        message.buildPlatform =
            object.buildPlatform !== undefined && object.buildPlatform !== null
                ? common_1.InstalledPlatformReference.fromPartial(object.buildPlatform)
                : undefined;
        message.progress =
            object.progress !== undefined && object.progress !== null
                ? common_1.TaskProgress.fromPartial(object.progress)
                : undefined;
        message.buildProperties = ((_f = object.buildProperties) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        return message;
    },
};
function createBaseExecutableSectionSize() {
    return { name: '', size: 0, maxSize: 0 };
}
exports.ExecutableSectionSize = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== '') {
            writer.uint32(10).string(message.name);
        }
        if (message.size !== 0) {
            writer.uint32(16).int64(message.size);
        }
        if (message.maxSize !== 0) {
            writer.uint32(24).int64(message.maxSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExecutableSectionSize();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.size = longToNumber(reader.int64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.maxSize = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : '',
            size: isSet(object.size) ? Number(object.size) : 0,
            maxSize: isSet(object.maxSize) ? Number(object.maxSize) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.size !== undefined && (obj.size = Math.round(message.size));
        message.maxSize !== undefined &&
            (obj.maxSize = Math.round(message.maxSize));
        return obj;
    },
    create(base) {
        return exports.ExecutableSectionSize.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExecutableSectionSize();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : '';
        message.size = (_b = object.size) !== null && _b !== void 0 ? _b : 0;
        message.maxSize = (_c = object.maxSize) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
const tsProtoGlobalThis = (() => {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    }
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof global !== 'undefined') {
        return global;
    }
    throw 'Unable to locate global object';
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, 'base64'));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString('base64');
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(''));
    }
}
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isObject(value) {
    return typeof value === 'object' && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
