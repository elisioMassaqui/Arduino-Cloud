import type { CallContext, CallOptions } from 'nice-grpc-common';
import _m0 from 'protobufjs/minimal';
import { Status } from '../../../../../google/rpc/status';
import { BoardDetailsRequest, BoardDetailsResponse, BoardListAllRequest, BoardListAllResponse, BoardListRequest, BoardListResponse, BoardListWatchRequest, BoardListWatchResponse, BoardSearchRequest, BoardSearchResponse } from './board';
import { DownloadProgress, Instance, Profile, TaskProgress } from './common';
import { CompileRequest, CompileResponse } from './compile';
import { PlatformDownloadRequest, PlatformDownloadResponse, PlatformInstallRequest, PlatformInstallResponse, PlatformListRequest, PlatformListResponse, PlatformSearchRequest, PlatformSearchResponse, PlatformUninstallRequest, PlatformUninstallResponse, PlatformUpgradeRequest, PlatformUpgradeResponse } from './core';
import { DebugRequest, DebugResponse, GetDebugConfigRequest, GetDebugConfigResponse, IsDebugSupportedRequest, IsDebugSupportedResponse } from './debug';
import { GitLibraryInstallRequest, GitLibraryInstallResponse, LibraryDownloadRequest, LibraryDownloadResponse, LibraryInstallRequest, LibraryInstallResponse, LibraryListRequest, LibraryListResponse, LibraryResolveDependenciesRequest, LibraryResolveDependenciesResponse, LibrarySearchRequest, LibrarySearchResponse, LibraryUninstallRequest, LibraryUninstallResponse, LibraryUpgradeAllRequest, LibraryUpgradeAllResponse, LibraryUpgradeRequest, LibraryUpgradeResponse, ZipLibraryInstallRequest, ZipLibraryInstallResponse } from './lib';
import { EnumerateMonitorPortSettingsRequest, EnumerateMonitorPortSettingsResponse, MonitorRequest, MonitorResponse } from './monitor';
import { BurnBootloaderRequest, BurnBootloaderResponse, ListProgrammersAvailableForUploadRequest, ListProgrammersAvailableForUploadResponse, SupportedUserFieldsRequest, SupportedUserFieldsResponse, UploadRequest, UploadResponse, UploadUsingProgrammerRequest, UploadUsingProgrammerResponse } from './upload';
export declare enum FailedInstanceInitReason {
    /** FAILED_INSTANCE_INIT_REASON_UNSPECIFIED - FAILED_INSTANCE_INIT_REASON_UNSPECIFIED the error reason is not specialized */
    FAILED_INSTANCE_INIT_REASON_UNSPECIFIED = 0,
    /** FAILED_INSTANCE_INIT_REASON_INVALID_INDEX_URL - INVALID_INDEX_URL a package index url is malformed */
    FAILED_INSTANCE_INIT_REASON_INVALID_INDEX_URL = 1,
    /**
     * FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR - FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR failure encountered while
     * loading an index
     */
    FAILED_INSTANCE_INIT_REASON_INDEX_LOAD_ERROR = 2,
    /**
     * FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR - FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR failure encountered while
     * loading a tool
     */
    FAILED_INSTANCE_INIT_REASON_TOOL_LOAD_ERROR = 3,
    /**
     * FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR - FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR failure encountered while
     * downloading an index
     */
    FAILED_INSTANCE_INIT_REASON_INDEX_DOWNLOAD_ERROR = 4,
    UNRECOGNIZED = -1
}
export declare function failedInstanceInitReasonFromJSON(object: any): FailedInstanceInitReason;
export declare function failedInstanceInitReasonToJSON(object: FailedInstanceInitReason): string;
export interface CreateRequest {
}
export interface CreateResponse {
    /** An Arduino Core instance. */
    instance: Instance | undefined;
}
export interface InitRequest {
    /** An Arduino Core instance. */
    instance: Instance | undefined;
    /** Profile to use */
    profile: string;
    /** The path where the sketch is stored */
    sketchPath: string;
}
export interface InitResponse {
    message?: {
        $case: 'initProgress';
        initProgress: InitResponse_Progress;
    } | {
        $case: 'error';
        error: Status;
    } | {
        $case: 'profile';
        profile: Profile;
    } | undefined;
}
export interface InitResponse_Progress {
    /** Progress of the downloads of platforms and libraries index files. */
    downloadProgress: DownloadProgress | undefined;
    /** Describes the current stage of the initialization. */
    taskProgress: TaskProgress | undefined;
}
export interface FailedInstanceInitError {
    /** specific cause of the error */
    reason: FailedInstanceInitReason;
    /** explanation of the error */
    message: string;
}
export interface DestroyRequest {
    /** The Arduino Core Service instance to destroy. */
    instance: Instance | undefined;
}
export interface DestroyResponse {
}
export interface UpdateIndexRequest {
    /** Arduino Core Service instance from the Init response. */
    instance: Instance | undefined;
    /** If set to true user defined package indexes will not be updated. */
    ignoreCustomPackageIndexes: boolean;
}
export interface UpdateIndexResponse {
    /** Progress of the package index download. */
    downloadProgress: DownloadProgress | undefined;
}
export interface UpdateLibrariesIndexRequest {
    /** Arduino Core Service instance from the Init response. */
    instance: Instance | undefined;
}
export interface UpdateLibrariesIndexResponse {
    /** Progress of the libraries index download. */
    downloadProgress: DownloadProgress | undefined;
}
export interface VersionRequest {
}
export interface VersionResponse {
    /** The version of Arduino CLI in use. */
    version: string;
}
export interface NewSketchRequest {
    /** New sketch name */
    sketchName: string;
    /**
     * Optional: create a Sketch in this directory
     * (used as "Sketchbook" directory).
     * Default Sketchbook directory "directories.User" is used if sketch_dir is
     * empty.
     */
    sketchDir: string;
    /** Specificies if an existing .ino sketch should be overwritten */
    overwrite: boolean;
}
export interface NewSketchResponse {
    /** Absolute path to a main sketch file */
    mainFile: string;
}
export interface LoadSketchRequest {
    /** Absolute path to single sketch file or a sketch folder */
    sketchPath: string;
}
export interface SketchProfile {
    /** Name of the profile */
    name: string;
    /** FQBN used by the profile */
    fqbn: string;
}
export interface LoadSketchResponse {
    /** Absolute path to a main sketch files */
    mainFile: string;
    /** Absolute path to folder that contains main_file */
    locationPath: string;
    /** List of absolute paths to other sketch files */
    otherSketchFiles: string[];
    /** List of absolute paths to additional sketch files */
    additionalFiles: string[];
    /**
     * List of absolute paths to supported files in the sketch root folder, main
     * file excluded
     */
    rootFolderFiles: string[];
    /** Default FQBN set in project file (sketch.yaml) */
    defaultFqbn: string;
    /** Default Port set in project file (sketch.yaml) */
    defaultPort: string;
    /** Default Protocol set in project file (sketch.yaml) */
    defaultProtocol: string;
    /** List of profiles present in the project file (sketch.yaml) */
    profiles: SketchProfile[];
    /** Default profile set in the project file (sketch.yaml) */
    defaultProfile: SketchProfile | undefined;
}
export interface ArchiveSketchRequest {
    /** Absolute path to Sketch file or folder containing Sketch file */
    sketchPath: string;
    /**
     * Absolute path to archive that will be created or folder that will contain
     * it
     */
    archivePath: string;
    /** Specifies if build directory should be included in the archive */
    includeBuildDir: boolean;
    /** Allows to override an already existing archive */
    overwrite: boolean;
}
export interface ArchiveSketchResponse {
}
export interface SetSketchDefaultsRequest {
    /** Absolute path to Sketch file or folder containing Sketch file */
    sketchPath: string;
    /** The desired value for default_fqbn in project file (sketch.yaml) */
    defaultFqbn: string;
    /** The desired value for default_port in project file (sketch.yaml) */
    defaultPortAddress: string;
    /** The desired value for default_protocol in project file (sketch.yaml) */
    defaultPortProtocol: string;
}
export interface SetSketchDefaultsResponse {
    /**
     * The value of default_fqnn that has been written in project file
     * (sketch.yaml)
     */
    defaultFqbn: string;
    /**
     * The value of default_port that has been written in project file
     * (sketch.yaml)
     */
    defaultPortAddress: string;
    /**
     * The value of default_protocol that has been written in project file
     * (sketch.yaml)
     */
    defaultPortProtocol: string;
}
export declare const CreateRequest: {
    encode(_: CreateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateRequest;
    fromJSON(_: any): CreateRequest;
    toJSON(_: CreateRequest): unknown;
    create(base?: DeepPartial<CreateRequest>): CreateRequest;
    fromPartial(_: DeepPartial<CreateRequest>): CreateRequest;
};
export declare const CreateResponse: {
    encode(message: CreateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateResponse;
    fromJSON(object: any): CreateResponse;
    toJSON(message: CreateResponse): unknown;
    create(base?: DeepPartial<CreateResponse>): CreateResponse;
    fromPartial(object: DeepPartial<CreateResponse>): CreateResponse;
};
export declare const InitRequest: {
    encode(message: InitRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InitRequest;
    fromJSON(object: any): InitRequest;
    toJSON(message: InitRequest): unknown;
    create(base?: DeepPartial<InitRequest>): InitRequest;
    fromPartial(object: DeepPartial<InitRequest>): InitRequest;
};
export declare const InitResponse: {
    encode(message: InitResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InitResponse;
    fromJSON(object: any): InitResponse;
    toJSON(message: InitResponse): unknown;
    create(base?: DeepPartial<InitResponse>): InitResponse;
    fromPartial(object: DeepPartial<InitResponse>): InitResponse;
};
export declare const InitResponse_Progress: {
    encode(message: InitResponse_Progress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InitResponse_Progress;
    fromJSON(object: any): InitResponse_Progress;
    toJSON(message: InitResponse_Progress): unknown;
    create(base?: DeepPartial<InitResponse_Progress>): InitResponse_Progress;
    fromPartial(object: DeepPartial<InitResponse_Progress>): InitResponse_Progress;
};
export declare const FailedInstanceInitError: {
    encode(message: FailedInstanceInitError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FailedInstanceInitError;
    fromJSON(object: any): FailedInstanceInitError;
    toJSON(message: FailedInstanceInitError): unknown;
    create(base?: DeepPartial<FailedInstanceInitError>): FailedInstanceInitError;
    fromPartial(object: DeepPartial<FailedInstanceInitError>): FailedInstanceInitError;
};
export declare const DestroyRequest: {
    encode(message: DestroyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DestroyRequest;
    fromJSON(object: any): DestroyRequest;
    toJSON(message: DestroyRequest): unknown;
    create(base?: DeepPartial<DestroyRequest>): DestroyRequest;
    fromPartial(object: DeepPartial<DestroyRequest>): DestroyRequest;
};
export declare const DestroyResponse: {
    encode(_: DestroyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DestroyResponse;
    fromJSON(_: any): DestroyResponse;
    toJSON(_: DestroyResponse): unknown;
    create(base?: DeepPartial<DestroyResponse>): DestroyResponse;
    fromPartial(_: DeepPartial<DestroyResponse>): DestroyResponse;
};
export declare const UpdateIndexRequest: {
    encode(message: UpdateIndexRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIndexRequest;
    fromJSON(object: any): UpdateIndexRequest;
    toJSON(message: UpdateIndexRequest): unknown;
    create(base?: DeepPartial<UpdateIndexRequest>): UpdateIndexRequest;
    fromPartial(object: DeepPartial<UpdateIndexRequest>): UpdateIndexRequest;
};
export declare const UpdateIndexResponse: {
    encode(message: UpdateIndexResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIndexResponse;
    fromJSON(object: any): UpdateIndexResponse;
    toJSON(message: UpdateIndexResponse): unknown;
    create(base?: DeepPartial<UpdateIndexResponse>): UpdateIndexResponse;
    fromPartial(object: DeepPartial<UpdateIndexResponse>): UpdateIndexResponse;
};
export declare const UpdateLibrariesIndexRequest: {
    encode(message: UpdateLibrariesIndexRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibrariesIndexRequest;
    fromJSON(object: any): UpdateLibrariesIndexRequest;
    toJSON(message: UpdateLibrariesIndexRequest): unknown;
    create(base?: DeepPartial<UpdateLibrariesIndexRequest>): UpdateLibrariesIndexRequest;
    fromPartial(object: DeepPartial<UpdateLibrariesIndexRequest>): UpdateLibrariesIndexRequest;
};
export declare const UpdateLibrariesIndexResponse: {
    encode(message: UpdateLibrariesIndexResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibrariesIndexResponse;
    fromJSON(object: any): UpdateLibrariesIndexResponse;
    toJSON(message: UpdateLibrariesIndexResponse): unknown;
    create(base?: DeepPartial<UpdateLibrariesIndexResponse>): UpdateLibrariesIndexResponse;
    fromPartial(object: DeepPartial<UpdateLibrariesIndexResponse>): UpdateLibrariesIndexResponse;
};
export declare const VersionRequest: {
    encode(_: VersionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VersionRequest;
    fromJSON(_: any): VersionRequest;
    toJSON(_: VersionRequest): unknown;
    create(base?: DeepPartial<VersionRequest>): VersionRequest;
    fromPartial(_: DeepPartial<VersionRequest>): VersionRequest;
};
export declare const VersionResponse: {
    encode(message: VersionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VersionResponse;
    fromJSON(object: any): VersionResponse;
    toJSON(message: VersionResponse): unknown;
    create(base?: DeepPartial<VersionResponse>): VersionResponse;
    fromPartial(object: DeepPartial<VersionResponse>): VersionResponse;
};
export declare const NewSketchRequest: {
    encode(message: NewSketchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NewSketchRequest;
    fromJSON(object: any): NewSketchRequest;
    toJSON(message: NewSketchRequest): unknown;
    create(base?: DeepPartial<NewSketchRequest>): NewSketchRequest;
    fromPartial(object: DeepPartial<NewSketchRequest>): NewSketchRequest;
};
export declare const NewSketchResponse: {
    encode(message: NewSketchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NewSketchResponse;
    fromJSON(object: any): NewSketchResponse;
    toJSON(message: NewSketchResponse): unknown;
    create(base?: DeepPartial<NewSketchResponse>): NewSketchResponse;
    fromPartial(object: DeepPartial<NewSketchResponse>): NewSketchResponse;
};
export declare const LoadSketchRequest: {
    encode(message: LoadSketchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoadSketchRequest;
    fromJSON(object: any): LoadSketchRequest;
    toJSON(message: LoadSketchRequest): unknown;
    create(base?: DeepPartial<LoadSketchRequest>): LoadSketchRequest;
    fromPartial(object: DeepPartial<LoadSketchRequest>): LoadSketchRequest;
};
export declare const SketchProfile: {
    encode(message: SketchProfile, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SketchProfile;
    fromJSON(object: any): SketchProfile;
    toJSON(message: SketchProfile): unknown;
    create(base?: DeepPartial<SketchProfile>): SketchProfile;
    fromPartial(object: DeepPartial<SketchProfile>): SketchProfile;
};
export declare const LoadSketchResponse: {
    encode(message: LoadSketchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoadSketchResponse;
    fromJSON(object: any): LoadSketchResponse;
    toJSON(message: LoadSketchResponse): unknown;
    create(base?: DeepPartial<LoadSketchResponse>): LoadSketchResponse;
    fromPartial(object: DeepPartial<LoadSketchResponse>): LoadSketchResponse;
};
export declare const ArchiveSketchRequest: {
    encode(message: ArchiveSketchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ArchiveSketchRequest;
    fromJSON(object: any): ArchiveSketchRequest;
    toJSON(message: ArchiveSketchRequest): unknown;
    create(base?: DeepPartial<ArchiveSketchRequest>): ArchiveSketchRequest;
    fromPartial(object: DeepPartial<ArchiveSketchRequest>): ArchiveSketchRequest;
};
export declare const ArchiveSketchResponse: {
    encode(_: ArchiveSketchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ArchiveSketchResponse;
    fromJSON(_: any): ArchiveSketchResponse;
    toJSON(_: ArchiveSketchResponse): unknown;
    create(base?: DeepPartial<ArchiveSketchResponse>): ArchiveSketchResponse;
    fromPartial(_: DeepPartial<ArchiveSketchResponse>): ArchiveSketchResponse;
};
export declare const SetSketchDefaultsRequest: {
    encode(message: SetSketchDefaultsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetSketchDefaultsRequest;
    fromJSON(object: any): SetSketchDefaultsRequest;
    toJSON(message: SetSketchDefaultsRequest): unknown;
    create(base?: DeepPartial<SetSketchDefaultsRequest>): SetSketchDefaultsRequest;
    fromPartial(object: DeepPartial<SetSketchDefaultsRequest>): SetSketchDefaultsRequest;
};
export declare const SetSketchDefaultsResponse: {
    encode(message: SetSketchDefaultsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetSketchDefaultsResponse;
    fromJSON(object: any): SetSketchDefaultsResponse;
    toJSON(message: SetSketchDefaultsResponse): unknown;
    create(base?: DeepPartial<SetSketchDefaultsResponse>): SetSketchDefaultsResponse;
    fromPartial(object: DeepPartial<SetSketchDefaultsResponse>): SetSketchDefaultsResponse;
};
/** The main Arduino Platform service API */
export declare type ArduinoCoreServiceDefinition = typeof ArduinoCoreServiceDefinition;
export declare const ArduinoCoreServiceDefinition: {
    readonly name: "ArduinoCoreService";
    readonly fullName: "cc.arduino.cli.commands.v1.ArduinoCoreService";
    readonly methods: {
        /** Create a new Arduino Core instance */
        readonly create: {
            readonly name: "Create";
            readonly requestType: {
                encode(_: CreateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreateRequest;
                fromJSON(_: any): CreateRequest;
                toJSON(_: CreateRequest): unknown;
                create(base?: DeepPartial<CreateRequest>): CreateRequest;
                fromPartial(_: DeepPartial<CreateRequest>): CreateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: CreateResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CreateResponse;
                fromJSON(object: any): CreateResponse;
                toJSON(message: CreateResponse): unknown;
                create(base?: DeepPartial<CreateResponse>): CreateResponse;
                fromPartial(object: DeepPartial<CreateResponse>): CreateResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Initializes an existing Arduino Core instance by loading platforms and
         * libraries
         */
        readonly init: {
            readonly name: "Init";
            readonly requestType: {
                encode(message: InitRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InitRequest;
                fromJSON(object: any): InitRequest;
                toJSON(message: InitRequest): unknown;
                create(base?: DeepPartial<InitRequest>): InitRequest;
                fromPartial(object: DeepPartial<InitRequest>): InitRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: InitResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InitResponse;
                fromJSON(object: any): InitResponse;
                toJSON(message: InitResponse): unknown;
                create(base?: DeepPartial<InitResponse>): InitResponse;
                fromPartial(object: DeepPartial<InitResponse>): InitResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Destroy an instance of the Arduino Core Service */
        readonly destroy: {
            readonly name: "Destroy";
            readonly requestType: {
                encode(message: DestroyRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DestroyRequest;
                fromJSON(object: any): DestroyRequest;
                toJSON(message: DestroyRequest): unknown;
                create(base?: DeepPartial<DestroyRequest>): DestroyRequest;
                fromPartial(object: DeepPartial<DestroyRequest>): DestroyRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: DestroyResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DestroyResponse;
                fromJSON(_: any): DestroyResponse;
                toJSON(_: DestroyResponse): unknown;
                create(base?: DeepPartial<DestroyResponse>): DestroyResponse;
                fromPartial(_: DeepPartial<DestroyResponse>): DestroyResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Update package index of the Arduino Core Service */
        readonly updateIndex: {
            readonly name: "UpdateIndex";
            readonly requestType: {
                encode(message: UpdateIndexRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIndexRequest;
                fromJSON(object: any): UpdateIndexRequest;
                toJSON(message: UpdateIndexRequest): unknown;
                create(base?: DeepPartial<UpdateIndexRequest>): UpdateIndexRequest;
                fromPartial(object: DeepPartial<UpdateIndexRequest>): UpdateIndexRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UpdateIndexResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateIndexResponse;
                fromJSON(object: any): UpdateIndexResponse;
                toJSON(message: UpdateIndexResponse): unknown;
                create(base?: DeepPartial<UpdateIndexResponse>): UpdateIndexResponse;
                fromPartial(object: DeepPartial<UpdateIndexResponse>): UpdateIndexResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Update libraries index */
        readonly updateLibrariesIndex: {
            readonly name: "UpdateLibrariesIndex";
            readonly requestType: {
                encode(message: UpdateLibrariesIndexRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibrariesIndexRequest;
                fromJSON(object: any): UpdateLibrariesIndexRequest;
                toJSON(message: UpdateLibrariesIndexRequest): unknown;
                create(base?: DeepPartial<UpdateLibrariesIndexRequest>): UpdateLibrariesIndexRequest;
                fromPartial(object: DeepPartial<UpdateLibrariesIndexRequest>): UpdateLibrariesIndexRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UpdateLibrariesIndexResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLibrariesIndexResponse;
                fromJSON(object: any): UpdateLibrariesIndexResponse;
                toJSON(message: UpdateLibrariesIndexResponse): unknown;
                create(base?: DeepPartial<UpdateLibrariesIndexResponse>): UpdateLibrariesIndexResponse;
                fromPartial(object: DeepPartial<UpdateLibrariesIndexResponse>): UpdateLibrariesIndexResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Get the version of Arduino CLI in use. */
        readonly version: {
            readonly name: "Version";
            readonly requestType: {
                encode(_: VersionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VersionRequest;
                fromJSON(_: any): VersionRequest;
                toJSON(_: VersionRequest): unknown;
                create(base?: DeepPartial<VersionRequest>): VersionRequest;
                fromPartial(_: DeepPartial<VersionRequest>): VersionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: VersionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VersionResponse;
                fromJSON(object: any): VersionResponse;
                toJSON(message: VersionResponse): unknown;
                create(base?: DeepPartial<VersionResponse>): VersionResponse;
                fromPartial(object: DeepPartial<VersionResponse>): VersionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Create a new Sketch */
        readonly newSketch: {
            readonly name: "NewSketch";
            readonly requestType: {
                encode(message: NewSketchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): NewSketchRequest;
                fromJSON(object: any): NewSketchRequest;
                toJSON(message: NewSketchRequest): unknown;
                create(base?: DeepPartial<NewSketchRequest>): NewSketchRequest;
                fromPartial(object: DeepPartial<NewSketchRequest>): NewSketchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: NewSketchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): NewSketchResponse;
                fromJSON(object: any): NewSketchResponse;
                toJSON(message: NewSketchResponse): unknown;
                create(base?: DeepPartial<NewSketchResponse>): NewSketchResponse;
                fromPartial(object: DeepPartial<NewSketchResponse>): NewSketchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Returns all files composing a Sketch */
        readonly loadSketch: {
            readonly name: "LoadSketch";
            readonly requestType: {
                encode(message: LoadSketchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LoadSketchRequest;
                fromJSON(object: any): LoadSketchRequest;
                toJSON(message: LoadSketchRequest): unknown;
                create(base?: DeepPartial<LoadSketchRequest>): LoadSketchRequest;
                fromPartial(object: DeepPartial<LoadSketchRequest>): LoadSketchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LoadSketchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LoadSketchResponse;
                fromJSON(object: any): LoadSketchResponse;
                toJSON(message: LoadSketchResponse): unknown;
                create(base?: DeepPartial<LoadSketchResponse>): LoadSketchResponse;
                fromPartial(object: DeepPartial<LoadSketchResponse>): LoadSketchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Creates a zip file containing all files of specified Sketch */
        readonly archiveSketch: {
            readonly name: "ArchiveSketch";
            readonly requestType: {
                encode(message: ArchiveSketchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ArchiveSketchRequest;
                fromJSON(object: any): ArchiveSketchRequest;
                toJSON(message: ArchiveSketchRequest): unknown;
                create(base?: DeepPartial<ArchiveSketchRequest>): ArchiveSketchRequest;
                fromPartial(object: DeepPartial<ArchiveSketchRequest>): ArchiveSketchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: ArchiveSketchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ArchiveSketchResponse;
                fromJSON(_: any): ArchiveSketchResponse;
                toJSON(_: ArchiveSketchResponse): unknown;
                create(base?: DeepPartial<ArchiveSketchResponse>): ArchiveSketchResponse;
                fromPartial(_: DeepPartial<ArchiveSketchResponse>): ArchiveSketchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Sets the sketch default FQBN and Port Address/Protocol in
         * the sketch project file (sketch.yaml). These metadata can be retrieved
         * using LoadSketch.
         */
        readonly setSketchDefaults: {
            readonly name: "SetSketchDefaults";
            readonly requestType: {
                encode(message: SetSketchDefaultsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SetSketchDefaultsRequest;
                fromJSON(object: any): SetSketchDefaultsRequest;
                toJSON(message: SetSketchDefaultsRequest): unknown;
                create(base?: DeepPartial<SetSketchDefaultsRequest>): SetSketchDefaultsRequest;
                fromPartial(object: DeepPartial<SetSketchDefaultsRequest>): SetSketchDefaultsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: SetSketchDefaultsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SetSketchDefaultsResponse;
                fromJSON(object: any): SetSketchDefaultsResponse;
                toJSON(message: SetSketchDefaultsResponse): unknown;
                create(base?: DeepPartial<SetSketchDefaultsResponse>): SetSketchDefaultsResponse;
                fromPartial(object: DeepPartial<SetSketchDefaultsResponse>): SetSketchDefaultsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Requests details about a board */
        readonly boardDetails: {
            readonly name: "BoardDetails";
            readonly requestType: {
                encode(message: BoardDetailsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardDetailsRequest;
                fromJSON(object: any): BoardDetailsRequest;
                toJSON(message: BoardDetailsRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    doNotExpandBuildProperties?: boolean | undefined;
                } | undefined): BoardDetailsRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    doNotExpandBuildProperties?: boolean | undefined;
                }): BoardDetailsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BoardDetailsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardDetailsResponse;
                fromJSON(object: any): BoardDetailsResponse;
                toJSON(message: BoardDetailsResponse): unknown;
                create(base?: {
                    fqbn?: string | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                    propertiesId?: string | undefined;
                    alias?: string | undefined;
                    official?: boolean | undefined;
                    pinout?: string | undefined;
                    package?: {
                        maintainer?: string | undefined;
                        url?: string | undefined;
                        websiteUrl?: string | undefined;
                        email?: string | undefined;
                        name?: string | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                    } | undefined;
                    platform?: {
                        architecture?: string | undefined;
                        category?: string | undefined;
                        url?: string | undefined;
                        archiveFilename?: string | undefined;
                        checksum?: string | undefined;
                        size?: number | undefined;
                        name?: string | undefined;
                    } | undefined;
                    toolsDependencies?: {
                        packager?: string | undefined;
                        name?: string | undefined;
                        version?: string | undefined;
                        systems?: {
                            checksum?: string | undefined;
                            host?: string | undefined;
                            archiveFilename?: string | undefined;
                            url?: string | undefined;
                            size?: number | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    configOptions?: {
                        option?: string | undefined;
                        optionLabel?: string | undefined;
                        values?: {
                            value?: string | undefined;
                            valueLabel?: string | undefined;
                            selected?: boolean | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    programmers?: {
                        platform?: string | undefined;
                        id?: string | undefined;
                        name?: string | undefined;
                    }[] | undefined;
                    identificationProperties?: {
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                    }[] | undefined;
                    buildProperties?: string[] | undefined;
                    defaultProgrammerId?: string | undefined;
                } | undefined): BoardDetailsResponse;
                fromPartial(object: {
                    fqbn?: string | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                    propertiesId?: string | undefined;
                    alias?: string | undefined;
                    official?: boolean | undefined;
                    pinout?: string | undefined;
                    package?: {
                        maintainer?: string | undefined;
                        url?: string | undefined;
                        websiteUrl?: string | undefined;
                        email?: string | undefined;
                        name?: string | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                    } | undefined;
                    platform?: {
                        architecture?: string | undefined;
                        category?: string | undefined;
                        url?: string | undefined;
                        archiveFilename?: string | undefined;
                        checksum?: string | undefined;
                        size?: number | undefined;
                        name?: string | undefined;
                    } | undefined;
                    toolsDependencies?: {
                        packager?: string | undefined;
                        name?: string | undefined;
                        version?: string | undefined;
                        systems?: {
                            checksum?: string | undefined;
                            host?: string | undefined;
                            archiveFilename?: string | undefined;
                            url?: string | undefined;
                            size?: number | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    configOptions?: {
                        option?: string | undefined;
                        optionLabel?: string | undefined;
                        values?: {
                            value?: string | undefined;
                            valueLabel?: string | undefined;
                            selected?: boolean | undefined;
                        }[] | undefined;
                    }[] | undefined;
                    programmers?: {
                        platform?: string | undefined;
                        id?: string | undefined;
                        name?: string | undefined;
                    }[] | undefined;
                    identificationProperties?: {
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                    }[] | undefined;
                    buildProperties?: string[] | undefined;
                    defaultProgrammerId?: string | undefined;
                }): BoardDetailsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List the boards currently connected to the computer. */
        readonly boardList: {
            readonly name: "BoardList";
            readonly requestType: {
                encode(message: BoardListRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardListRequest;
                fromJSON(object: any): BoardListRequest;
                toJSON(message: BoardListRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    timeout?: number | undefined;
                    fqbn?: string | undefined;
                } | undefined): BoardListRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    timeout?: number | undefined;
                    fqbn?: string | undefined;
                }): BoardListRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BoardListResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardListResponse;
                fromJSON(object: any): BoardListResponse;
                toJSON(message: BoardListResponse): unknown;
                create(base?: {
                    ports?: {
                        matchingBoards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                            isHidden?: boolean | undefined;
                            platform?: {
                                id?: string | undefined;
                                installed?: string | undefined;
                                latest?: string | undefined;
                                name?: string | undefined;
                                maintainer?: string | undefined;
                                website?: string | undefined;
                                email?: string | undefined;
                                boards?: {
                                    name?: string | undefined;
                                    fqbn?: string | undefined;
                                }[] | undefined;
                                manuallyInstalled?: boolean | undefined;
                                deprecated?: boolean | undefined;
                                type?: string[] | undefined;
                                help?: {
                                    online?: string | undefined;
                                } | undefined;
                                indexed?: boolean | undefined;
                                missingMetadata?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        port?: {
                            address?: string | undefined;
                            label?: string | undefined;
                            protocol?: string | undefined;
                            protocolLabel?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            hardwareId?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined): BoardListResponse;
                fromPartial(object: {
                    ports?: {
                        matchingBoards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                            isHidden?: boolean | undefined;
                            platform?: {
                                id?: string | undefined;
                                installed?: string | undefined;
                                latest?: string | undefined;
                                name?: string | undefined;
                                maintainer?: string | undefined;
                                website?: string | undefined;
                                email?: string | undefined;
                                boards?: {
                                    name?: string | undefined;
                                    fqbn?: string | undefined;
                                }[] | undefined;
                                manuallyInstalled?: boolean | undefined;
                                deprecated?: boolean | undefined;
                                type?: string[] | undefined;
                                help?: {
                                    online?: string | undefined;
                                } | undefined;
                                indexed?: boolean | undefined;
                                missingMetadata?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        port?: {
                            address?: string | undefined;
                            label?: string | undefined;
                            protocol?: string | undefined;
                            protocolLabel?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            hardwareId?: string | undefined;
                        } | undefined;
                    }[] | undefined;
                }): BoardListResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List all the boards provided by installed platforms. */
        readonly boardListAll: {
            readonly name: "BoardListAll";
            readonly requestType: {
                encode(message: BoardListAllRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardListAllRequest;
                fromJSON(object: any): BoardListAllRequest;
                toJSON(message: BoardListAllRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    searchArgs?: string[] | undefined;
                    includeHiddenBoards?: boolean | undefined;
                } | undefined): BoardListAllRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    searchArgs?: string[] | undefined;
                    includeHiddenBoards?: boolean | undefined;
                }): BoardListAllRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BoardListAllResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardListAllResponse;
                fromJSON(object: any): BoardListAllResponse;
                toJSON(message: BoardListAllResponse): unknown;
                create(base?: {
                    boards?: {
                        name?: string | undefined;
                        fqbn?: string | undefined;
                        isHidden?: boolean | undefined;
                        platform?: {
                            id?: string | undefined;
                            installed?: string | undefined;
                            latest?: string | undefined;
                            name?: string | undefined;
                            maintainer?: string | undefined;
                            website?: string | undefined;
                            email?: string | undefined;
                            boards?: {
                                name?: string | undefined;
                                fqbn?: string | undefined;
                            }[] | undefined;
                            manuallyInstalled?: boolean | undefined;
                            deprecated?: boolean | undefined;
                            type?: string[] | undefined;
                            help?: {
                                online?: string | undefined;
                            } | undefined;
                            indexed?: boolean | undefined;
                            missingMetadata?: boolean | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined): BoardListAllResponse;
                fromPartial(object: {
                    boards?: {
                        name?: string | undefined;
                        fqbn?: string | undefined;
                        isHidden?: boolean | undefined;
                        platform?: {
                            id?: string | undefined;
                            installed?: string | undefined;
                            latest?: string | undefined;
                            name?: string | undefined;
                            maintainer?: string | undefined;
                            website?: string | undefined;
                            email?: string | undefined;
                            boards?: {
                                name?: string | undefined;
                                fqbn?: string | undefined;
                            }[] | undefined;
                            manuallyInstalled?: boolean | undefined;
                            deprecated?: boolean | undefined;
                            type?: string[] | undefined;
                            help?: {
                                online?: string | undefined;
                            } | undefined;
                            indexed?: boolean | undefined;
                            missingMetadata?: boolean | undefined;
                        } | undefined;
                    }[] | undefined;
                }): BoardListAllResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search boards in installed and not installed Platforms. */
        readonly boardSearch: {
            readonly name: "BoardSearch";
            readonly requestType: {
                encode(message: BoardSearchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardSearchRequest;
                fromJSON(object: any): BoardSearchRequest;
                toJSON(message: BoardSearchRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    searchArgs?: string | undefined;
                    includeHiddenBoards?: boolean | undefined;
                } | undefined): BoardSearchRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    searchArgs?: string | undefined;
                    includeHiddenBoards?: boolean | undefined;
                }): BoardSearchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BoardSearchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardSearchResponse;
                fromJSON(object: any): BoardSearchResponse;
                toJSON(message: BoardSearchResponse): unknown;
                create(base?: {
                    boards?: {
                        name?: string | undefined;
                        fqbn?: string | undefined;
                        isHidden?: boolean | undefined;
                        platform?: {
                            id?: string | undefined;
                            installed?: string | undefined;
                            latest?: string | undefined;
                            name?: string | undefined;
                            maintainer?: string | undefined;
                            website?: string | undefined;
                            email?: string | undefined;
                            boards?: {
                                name?: string | undefined;
                                fqbn?: string | undefined;
                            }[] | undefined;
                            manuallyInstalled?: boolean | undefined;
                            deprecated?: boolean | undefined;
                            type?: string[] | undefined;
                            help?: {
                                online?: string | undefined;
                            } | undefined;
                            indexed?: boolean | undefined;
                            missingMetadata?: boolean | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined): BoardSearchResponse;
                fromPartial(object: {
                    boards?: {
                        name?: string | undefined;
                        fqbn?: string | undefined;
                        isHidden?: boolean | undefined;
                        platform?: {
                            id?: string | undefined;
                            installed?: string | undefined;
                            latest?: string | undefined;
                            name?: string | undefined;
                            maintainer?: string | undefined;
                            website?: string | undefined;
                            email?: string | undefined;
                            boards?: {
                                name?: string | undefined;
                                fqbn?: string | undefined;
                            }[] | undefined;
                            manuallyInstalled?: boolean | undefined;
                            deprecated?: boolean | undefined;
                            type?: string[] | undefined;
                            help?: {
                                online?: string | undefined;
                            } | undefined;
                            indexed?: boolean | undefined;
                            missingMetadata?: boolean | undefined;
                        } | undefined;
                    }[] | undefined;
                }): BoardSearchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List boards connection and disconnected events. */
        readonly boardListWatch: {
            readonly name: "BoardListWatch";
            readonly requestType: {
                encode(message: BoardListWatchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardListWatchRequest;
                fromJSON(object: any): BoardListWatchRequest;
                toJSON(message: BoardListWatchRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                } | undefined): BoardListWatchRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                }): BoardListWatchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BoardListWatchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BoardListWatchResponse;
                fromJSON(object: any): BoardListWatchResponse;
                toJSON(message: BoardListWatchResponse): unknown;
                create(base?: {
                    eventType?: string | undefined;
                    port?: {
                        matchingBoards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                            isHidden?: boolean | undefined;
                            platform?: {
                                id?: string | undefined;
                                installed?: string | undefined;
                                latest?: string | undefined;
                                name?: string | undefined;
                                maintainer?: string | undefined;
                                website?: string | undefined;
                                email?: string | undefined;
                                boards?: {
                                    name?: string | undefined;
                                    fqbn?: string | undefined;
                                }[] | undefined;
                                manuallyInstalled?: boolean | undefined;
                                deprecated?: boolean | undefined;
                                type?: string[] | undefined;
                                help?: {
                                    online?: string | undefined;
                                } | undefined;
                                indexed?: boolean | undefined;
                                missingMetadata?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        port?: {
                            address?: string | undefined;
                            label?: string | undefined;
                            protocol?: string | undefined;
                            protocolLabel?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            hardwareId?: string | undefined;
                        } | undefined;
                    } | undefined;
                    error?: string | undefined;
                } | undefined): BoardListWatchResponse;
                fromPartial(object: {
                    eventType?: string | undefined;
                    port?: {
                        matchingBoards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                            isHidden?: boolean | undefined;
                            platform?: {
                                id?: string | undefined;
                                installed?: string | undefined;
                                latest?: string | undefined;
                                name?: string | undefined;
                                maintainer?: string | undefined;
                                website?: string | undefined;
                                email?: string | undefined;
                                boards?: {
                                    name?: string | undefined;
                                    fqbn?: string | undefined;
                                }[] | undefined;
                                manuallyInstalled?: boolean | undefined;
                                deprecated?: boolean | undefined;
                                type?: string[] | undefined;
                                help?: {
                                    online?: string | undefined;
                                } | undefined;
                                indexed?: boolean | undefined;
                                missingMetadata?: boolean | undefined;
                            } | undefined;
                        }[] | undefined;
                        port?: {
                            address?: string | undefined;
                            label?: string | undefined;
                            protocol?: string | undefined;
                            protocolLabel?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            hardwareId?: string | undefined;
                        } | undefined;
                    } | undefined;
                    error?: string | undefined;
                }): BoardListWatchResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Compile an Arduino sketch. */
        readonly compile: {
            readonly name: "Compile";
            readonly requestType: {
                encode(message: CompileRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): CompileRequest;
                fromJSON(object: any): CompileRequest;
                toJSON(message: CompileRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    showProperties?: boolean | undefined;
                    preprocess?: boolean | undefined;
                    buildCachePath?: string | undefined;
                    buildPath?: string | undefined;
                    buildProperties?: string[] | undefined;
                    warnings?: string | undefined;
                    verbose?: boolean | undefined;
                    quiet?: boolean | undefined;
                    jobs?: number | undefined;
                    libraries?: string[] | undefined;
                    optimizeForDebug?: boolean | undefined;
                    exportDir?: string | undefined;
                    clean?: boolean | undefined;
                    createCompilationDatabaseOnly?: boolean | undefined;
                    sourceOverride?: {
                        [x: string]: string | undefined;
                    } | undefined;
                    exportBinaries?: boolean | undefined;
                    library?: string[] | undefined;
                    keysKeychain?: string | undefined;
                    signKey?: string | undefined;
                    encryptKey?: string | undefined;
                    skipLibrariesDiscovery?: boolean | undefined;
                    doNotExpandBuildProperties?: boolean | undefined;
                } | undefined): CompileRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    showProperties?: boolean | undefined;
                    preprocess?: boolean | undefined;
                    buildCachePath?: string | undefined;
                    buildPath?: string | undefined;
                    buildProperties?: string[] | undefined;
                    warnings?: string | undefined;
                    verbose?: boolean | undefined;
                    quiet?: boolean | undefined;
                    jobs?: number | undefined;
                    libraries?: string[] | undefined;
                    optimizeForDebug?: boolean | undefined;
                    exportDir?: string | undefined;
                    clean?: boolean | undefined;
                    createCompilationDatabaseOnly?: boolean | undefined;
                    sourceOverride?: {
                        [x: string]: string | undefined;
                    } | undefined;
                    exportBinaries?: boolean | undefined;
                    library?: string[] | undefined;
                    keysKeychain?: string | undefined;
                    signKey?: string | undefined;
                    encryptKey?: string | undefined;
                    skipLibrariesDiscovery?: boolean | undefined;
                    doNotExpandBuildProperties?: boolean | undefined;
                }): CompileRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: CompileResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): CompileResponse;
                fromJSON(object: any): CompileResponse;
                toJSON(message: CompileResponse): unknown;
                create(base?: {
                    outStream?: Uint8Array | undefined;
                    errStream?: Uint8Array | undefined;
                    buildPath?: string | undefined;
                    usedLibraries?: {
                        name?: string | undefined;
                        author?: string | undefined;
                        maintainer?: string | undefined;
                        sentence?: string | undefined;
                        paragraph?: string | undefined;
                        website?: string | undefined;
                        category?: string | undefined;
                        architectures?: string[] | undefined;
                        types?: string[] | undefined;
                        installDir?: string | undefined;
                        sourceDir?: string | undefined;
                        utilityDir?: string | undefined;
                        containerPlatform?: string | undefined;
                        dotALinkage?: boolean | undefined;
                        precompiled?: boolean | undefined;
                        ldFlags?: string | undefined;
                        isLegacy?: boolean | undefined;
                        version?: string | undefined;
                        license?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        location?: import("./lib").LibraryLocation | undefined;
                        layout?: import("./lib").LibraryLayout | undefined;
                        examples?: string[] | undefined;
                        providesIncludes?: string[] | undefined;
                        compatibleWith?: {
                            [x: string]: boolean | undefined;
                        } | undefined;
                        inDevelopment?: boolean | undefined;
                    }[] | undefined;
                    executableSectionsSize?: {
                        name?: string | undefined;
                        size?: number | undefined;
                        maxSize?: number | undefined;
                    }[] | undefined;
                    boardPlatform?: {
                        id?: string | undefined;
                        version?: string | undefined;
                        installDir?: string | undefined;
                        packageUrl?: string | undefined;
                    } | undefined;
                    buildPlatform?: {
                        id?: string | undefined;
                        version?: string | undefined;
                        installDir?: string | undefined;
                        packageUrl?: string | undefined;
                    } | undefined;
                    progress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                    buildProperties?: string[] | undefined;
                } | undefined): CompileResponse;
                fromPartial(object: {
                    outStream?: Uint8Array | undefined;
                    errStream?: Uint8Array | undefined;
                    buildPath?: string | undefined;
                    usedLibraries?: {
                        name?: string | undefined;
                        author?: string | undefined;
                        maintainer?: string | undefined;
                        sentence?: string | undefined;
                        paragraph?: string | undefined;
                        website?: string | undefined;
                        category?: string | undefined;
                        architectures?: string[] | undefined;
                        types?: string[] | undefined;
                        installDir?: string | undefined;
                        sourceDir?: string | undefined;
                        utilityDir?: string | undefined;
                        containerPlatform?: string | undefined;
                        dotALinkage?: boolean | undefined;
                        precompiled?: boolean | undefined;
                        ldFlags?: string | undefined;
                        isLegacy?: boolean | undefined;
                        version?: string | undefined;
                        license?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        location?: import("./lib").LibraryLocation | undefined;
                        layout?: import("./lib").LibraryLayout | undefined;
                        examples?: string[] | undefined;
                        providesIncludes?: string[] | undefined;
                        compatibleWith?: {
                            [x: string]: boolean | undefined;
                        } | undefined;
                        inDevelopment?: boolean | undefined;
                    }[] | undefined;
                    executableSectionsSize?: {
                        name?: string | undefined;
                        size?: number | undefined;
                        maxSize?: number | undefined;
                    }[] | undefined;
                    boardPlatform?: {
                        id?: string | undefined;
                        version?: string | undefined;
                        installDir?: string | undefined;
                        packageUrl?: string | undefined;
                    } | undefined;
                    buildPlatform?: {
                        id?: string | undefined;
                        version?: string | undefined;
                        installDir?: string | undefined;
                        packageUrl?: string | undefined;
                    } | undefined;
                    progress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                    buildProperties?: string[] | undefined;
                }): CompileResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Download and install a platform and its tool dependencies. */
        readonly platformInstall: {
            readonly name: "PlatformInstall";
            readonly requestType: {
                encode(message: PlatformInstallRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformInstallRequest;
                fromJSON(object: any): PlatformInstallRequest;
                toJSON(message: PlatformInstallRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    version?: string | undefined;
                    skipPostInstall?: boolean | undefined;
                    noOverwrite?: boolean | undefined;
                    skipPreUninstall?: boolean | undefined;
                } | undefined): PlatformInstallRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    version?: string | undefined;
                    skipPostInstall?: boolean | undefined;
                    noOverwrite?: boolean | undefined;
                    skipPreUninstall?: boolean | undefined;
                }): PlatformInstallRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: PlatformInstallResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformInstallResponse;
                fromJSON(object: any): PlatformInstallResponse;
                toJSON(message: PlatformInstallResponse): unknown;
                create(base?: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): PlatformInstallResponse;
                fromPartial(object: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): PlatformInstallResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /**
         * Download a platform and its tool dependencies to the `staging/packages`
         * subdirectory of the data directory.
         */
        readonly platformDownload: {
            readonly name: "PlatformDownload";
            readonly requestType: {
                encode(message: PlatformDownloadRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformDownloadRequest;
                fromJSON(object: any): PlatformDownloadRequest;
                toJSON(message: PlatformDownloadRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    version?: string | undefined;
                } | undefined): PlatformDownloadRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    version?: string | undefined;
                }): PlatformDownloadRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: PlatformDownloadResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformDownloadResponse;
                fromJSON(object: any): PlatformDownloadResponse;
                toJSON(message: PlatformDownloadResponse): unknown;
                create(base?: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                } | undefined): PlatformDownloadResponse;
                fromPartial(object: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                }): PlatformDownloadResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /**
         * Uninstall a platform as well as its tool dependencies that are not used by
         * other installed platforms.
         */
        readonly platformUninstall: {
            readonly name: "PlatformUninstall";
            readonly requestType: {
                encode(message: PlatformUninstallRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformUninstallRequest;
                fromJSON(object: any): PlatformUninstallRequest;
                toJSON(message: PlatformUninstallRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    skipPreUninstall?: boolean | undefined;
                } | undefined): PlatformUninstallRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    skipPreUninstall?: boolean | undefined;
                }): PlatformUninstallRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: PlatformUninstallResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformUninstallResponse;
                fromJSON(object: any): PlatformUninstallResponse;
                toJSON(message: PlatformUninstallResponse): unknown;
                create(base?: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): PlatformUninstallResponse;
                fromPartial(object: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): PlatformUninstallResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Upgrade an installed platform to the latest version. */
        readonly platformUpgrade: {
            readonly name: "PlatformUpgrade";
            readonly requestType: {
                encode(message: PlatformUpgradeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformUpgradeRequest;
                fromJSON(object: any): PlatformUpgradeRequest;
                toJSON(message: PlatformUpgradeRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    skipPostInstall?: boolean | undefined;
                    skipPreUninstall?: boolean | undefined;
                } | undefined): PlatformUpgradeRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    platformPackage?: string | undefined;
                    architecture?: string | undefined;
                    skipPostInstall?: boolean | undefined;
                    skipPreUninstall?: boolean | undefined;
                }): PlatformUpgradeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: PlatformUpgradeResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformUpgradeResponse;
                fromJSON(object: any): PlatformUpgradeResponse;
                toJSON(message: PlatformUpgradeResponse): unknown;
                create(base?: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                    platform?: {
                        id?: string | undefined;
                        installed?: string | undefined;
                        latest?: string | undefined;
                        name?: string | undefined;
                        maintainer?: string | undefined;
                        website?: string | undefined;
                        email?: string | undefined;
                        boards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                        }[] | undefined;
                        manuallyInstalled?: boolean | undefined;
                        deprecated?: boolean | undefined;
                        type?: string[] | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                        indexed?: boolean | undefined;
                        missingMetadata?: boolean | undefined;
                    } | undefined;
                } | undefined): PlatformUpgradeResponse;
                fromPartial(object: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                    platform?: {
                        id?: string | undefined;
                        installed?: string | undefined;
                        latest?: string | undefined;
                        name?: string | undefined;
                        maintainer?: string | undefined;
                        website?: string | undefined;
                        email?: string | undefined;
                        boards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                        }[] | undefined;
                        manuallyInstalled?: boolean | undefined;
                        deprecated?: boolean | undefined;
                        type?: string[] | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                        indexed?: boolean | undefined;
                        missingMetadata?: boolean | undefined;
                    } | undefined;
                }): PlatformUpgradeResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Upload a compiled sketch to a board. */
        readonly upload: {
            readonly name: "Upload";
            readonly requestType: {
                encode(message: UploadRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UploadRequest;
                fromJSON(object: any): UploadRequest;
                toJSON(message: UploadRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    verbose?: boolean | undefined;
                    verify?: boolean | undefined;
                    importFile?: string | undefined;
                    importDir?: string | undefined;
                    programmer?: string | undefined;
                    dryRun?: boolean | undefined;
                    userFields?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } | undefined): UploadRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    verbose?: boolean | undefined;
                    verify?: boolean | undefined;
                    importFile?: string | undefined;
                    importDir?: string | undefined;
                    programmer?: string | undefined;
                    dryRun?: boolean | undefined;
                    userFields?: {
                        [x: string]: string | undefined;
                    } | undefined;
                }): UploadRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UploadResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UploadResponse;
                fromJSON(object: any): UploadResponse;
                toJSON(message: UploadResponse): unknown;
                create(base?: {
                    message?: ({
                        outStream?: Uint8Array | undefined;
                    } & {
                        $case: "outStream";
                    }) | ({
                        errStream?: Uint8Array | undefined;
                    } & {
                        $case: "errStream";
                    }) | ({
                        result?: {
                            updatedUploadPort?: {
                                address?: string | undefined;
                                label?: string | undefined;
                                protocol?: string | undefined;
                                protocolLabel?: string | undefined;
                                properties?: {
                                    [x: string]: string | undefined;
                                } | undefined;
                                hardwareId?: string | undefined;
                            } | undefined;
                        } | undefined;
                    } & {
                        $case: "result";
                    }) | undefined;
                } | undefined): UploadResponse;
                fromPartial(object: {
                    message?: ({
                        outStream?: Uint8Array | undefined;
                    } & {
                        $case: "outStream";
                    }) | ({
                        errStream?: Uint8Array | undefined;
                    } & {
                        $case: "errStream";
                    }) | ({
                        result?: {
                            updatedUploadPort?: {
                                address?: string | undefined;
                                label?: string | undefined;
                                protocol?: string | undefined;
                                protocolLabel?: string | undefined;
                                properties?: {
                                    [x: string]: string | undefined;
                                } | undefined;
                                hardwareId?: string | undefined;
                            } | undefined;
                        } | undefined;
                    } & {
                        $case: "result";
                    }) | undefined;
                }): UploadResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Upload a compiled sketch to a board using a programmer. */
        readonly uploadUsingProgrammer: {
            readonly name: "UploadUsingProgrammer";
            readonly requestType: {
                encode(message: UploadUsingProgrammerRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UploadUsingProgrammerRequest;
                fromJSON(object: any): UploadUsingProgrammerRequest;
                toJSON(message: UploadUsingProgrammerRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    verbose?: boolean | undefined;
                    verify?: boolean | undefined;
                    importFile?: string | undefined;
                    importDir?: string | undefined;
                    programmer?: string | undefined;
                    dryRun?: boolean | undefined;
                    userFields?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } | undefined): UploadUsingProgrammerRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    verbose?: boolean | undefined;
                    verify?: boolean | undefined;
                    importFile?: string | undefined;
                    importDir?: string | undefined;
                    programmer?: string | undefined;
                    dryRun?: boolean | undefined;
                    userFields?: {
                        [x: string]: string | undefined;
                    } | undefined;
                }): UploadUsingProgrammerRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: UploadUsingProgrammerResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): UploadUsingProgrammerResponse;
                fromJSON(object: any): UploadUsingProgrammerResponse;
                toJSON(message: UploadUsingProgrammerResponse): unknown;
                create(base?: {
                    outStream?: Uint8Array | undefined;
                    errStream?: Uint8Array | undefined;
                } | undefined): UploadUsingProgrammerResponse;
                fromPartial(object: {
                    outStream?: Uint8Array | undefined;
                    errStream?: Uint8Array | undefined;
                }): UploadUsingProgrammerResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /**
         * Returns the list of users fields necessary to upload to that board
         * using the specified protocol.
         */
        readonly supportedUserFields: {
            readonly name: "SupportedUserFields";
            readonly requestType: {
                encode(message: SupportedUserFieldsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): SupportedUserFieldsRequest;
                fromJSON(object: any): SupportedUserFieldsRequest;
                toJSON(message: SupportedUserFieldsRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    protocol?: string | undefined;
                } | undefined): SupportedUserFieldsRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    protocol?: string | undefined;
                }): SupportedUserFieldsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: SupportedUserFieldsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): SupportedUserFieldsResponse;
                fromJSON(object: any): SupportedUserFieldsResponse;
                toJSON(message: SupportedUserFieldsResponse): unknown;
                create(base?: {
                    userFields?: {
                        toolId?: string | undefined;
                        name?: string | undefined;
                        label?: string | undefined;
                        secret?: boolean | undefined;
                    }[] | undefined;
                } | undefined): SupportedUserFieldsResponse;
                fromPartial(object: {
                    userFields?: {
                        toolId?: string | undefined;
                        name?: string | undefined;
                        label?: string | undefined;
                        secret?: boolean | undefined;
                    }[] | undefined;
                }): SupportedUserFieldsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List programmers available for a board. */
        readonly listProgrammersAvailableForUpload: {
            readonly name: "ListProgrammersAvailableForUpload";
            readonly requestType: {
                encode(message: ListProgrammersAvailableForUploadRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ListProgrammersAvailableForUploadRequest;
                fromJSON(object: any): ListProgrammersAvailableForUploadRequest;
                toJSON(message: ListProgrammersAvailableForUploadRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                } | undefined): ListProgrammersAvailableForUploadRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                }): ListProgrammersAvailableForUploadRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ListProgrammersAvailableForUploadResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ListProgrammersAvailableForUploadResponse;
                fromJSON(object: any): ListProgrammersAvailableForUploadResponse;
                toJSON(message: ListProgrammersAvailableForUploadResponse): unknown;
                create(base?: {
                    programmers?: {
                        platform?: string | undefined;
                        id?: string | undefined;
                        name?: string | undefined;
                    }[] | undefined;
                } | undefined): ListProgrammersAvailableForUploadResponse;
                fromPartial(object: {
                    programmers?: {
                        platform?: string | undefined;
                        id?: string | undefined;
                        name?: string | undefined;
                    }[] | undefined;
                }): ListProgrammersAvailableForUploadResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Burn bootloader to a board. */
        readonly burnBootloader: {
            readonly name: "BurnBootloader";
            readonly requestType: {
                encode(message: BurnBootloaderRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BurnBootloaderRequest;
                fromJSON(object: any): BurnBootloaderRequest;
                toJSON(message: BurnBootloaderRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    verbose?: boolean | undefined;
                    verify?: boolean | undefined;
                    programmer?: string | undefined;
                    dryRun?: boolean | undefined;
                    userFields?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } | undefined): BurnBootloaderRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    verbose?: boolean | undefined;
                    verify?: boolean | undefined;
                    programmer?: string | undefined;
                    dryRun?: boolean | undefined;
                    userFields?: {
                        [x: string]: string | undefined;
                    } | undefined;
                }): BurnBootloaderRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BurnBootloaderResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): BurnBootloaderResponse;
                fromJSON(object: any): BurnBootloaderResponse;
                toJSON(message: BurnBootloaderResponse): unknown;
                create(base?: {
                    outStream?: Uint8Array | undefined;
                    errStream?: Uint8Array | undefined;
                } | undefined): BurnBootloaderResponse;
                fromPartial(object: {
                    outStream?: Uint8Array | undefined;
                    errStream?: Uint8Array | undefined;
                }): BurnBootloaderResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Search for a platform in the platforms indexes. */
        readonly platformSearch: {
            readonly name: "PlatformSearch";
            readonly requestType: {
                encode(message: PlatformSearchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformSearchRequest;
                fromJSON(object: any): PlatformSearchRequest;
                toJSON(message: PlatformSearchRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    searchArgs?: string | undefined;
                    allVersions?: boolean | undefined;
                } | undefined): PlatformSearchRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    searchArgs?: string | undefined;
                    allVersions?: boolean | undefined;
                }): PlatformSearchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: PlatformSearchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformSearchResponse;
                fromJSON(object: any): PlatformSearchResponse;
                toJSON(message: PlatformSearchResponse): unknown;
                create(base?: {
                    searchOutput?: {
                        id?: string | undefined;
                        installed?: string | undefined;
                        latest?: string | undefined;
                        name?: string | undefined;
                        maintainer?: string | undefined;
                        website?: string | undefined;
                        email?: string | undefined;
                        boards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                        }[] | undefined;
                        manuallyInstalled?: boolean | undefined;
                        deprecated?: boolean | undefined;
                        type?: string[] | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                        indexed?: boolean | undefined;
                        missingMetadata?: boolean | undefined;
                    }[] | undefined;
                } | undefined): PlatformSearchResponse;
                fromPartial(object: {
                    searchOutput?: {
                        id?: string | undefined;
                        installed?: string | undefined;
                        latest?: string | undefined;
                        name?: string | undefined;
                        maintainer?: string | undefined;
                        website?: string | undefined;
                        email?: string | undefined;
                        boards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                        }[] | undefined;
                        manuallyInstalled?: boolean | undefined;
                        deprecated?: boolean | undefined;
                        type?: string[] | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                        indexed?: boolean | undefined;
                        missingMetadata?: boolean | undefined;
                    }[] | undefined;
                }): PlatformSearchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List all installed platforms. */
        readonly platformList: {
            readonly name: "PlatformList";
            readonly requestType: {
                encode(message: PlatformListRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformListRequest;
                fromJSON(object: any): PlatformListRequest;
                toJSON(message: PlatformListRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    updatableOnly?: boolean | undefined;
                    all?: boolean | undefined;
                } | undefined): PlatformListRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    updatableOnly?: boolean | undefined;
                    all?: boolean | undefined;
                }): PlatformListRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: PlatformListResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PlatformListResponse;
                fromJSON(object: any): PlatformListResponse;
                toJSON(message: PlatformListResponse): unknown;
                create(base?: {
                    installedPlatforms?: {
                        id?: string | undefined;
                        installed?: string | undefined;
                        latest?: string | undefined;
                        name?: string | undefined;
                        maintainer?: string | undefined;
                        website?: string | undefined;
                        email?: string | undefined;
                        boards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                        }[] | undefined;
                        manuallyInstalled?: boolean | undefined;
                        deprecated?: boolean | undefined;
                        type?: string[] | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                        indexed?: boolean | undefined;
                        missingMetadata?: boolean | undefined;
                    }[] | undefined;
                } | undefined): PlatformListResponse;
                fromPartial(object: {
                    installedPlatforms?: {
                        id?: string | undefined;
                        installed?: string | undefined;
                        latest?: string | undefined;
                        name?: string | undefined;
                        maintainer?: string | undefined;
                        website?: string | undefined;
                        email?: string | undefined;
                        boards?: {
                            name?: string | undefined;
                            fqbn?: string | undefined;
                        }[] | undefined;
                        manuallyInstalled?: boolean | undefined;
                        deprecated?: boolean | undefined;
                        type?: string[] | undefined;
                        help?: {
                            online?: string | undefined;
                        } | undefined;
                        indexed?: boolean | undefined;
                        missingMetadata?: boolean | undefined;
                    }[] | undefined;
                }): PlatformListResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Download the archive file of an Arduino library in the libraries index to
         * the staging directory.
         */
        readonly libraryDownload: {
            readonly name: "LibraryDownload";
            readonly requestType: {
                encode(message: LibraryDownloadRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryDownloadRequest;
                fromJSON(object: any): LibraryDownloadRequest;
                toJSON(message: LibraryDownloadRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                } | undefined): LibraryDownloadRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                }): LibraryDownloadRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibraryDownloadResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryDownloadResponse;
                fromJSON(object: any): LibraryDownloadResponse;
                toJSON(message: LibraryDownloadResponse): unknown;
                create(base?: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                } | undefined): LibraryDownloadResponse;
                fromPartial(object: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                }): LibraryDownloadResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Download and install an Arduino library from the libraries index. */
        readonly libraryInstall: {
            readonly name: "LibraryInstall";
            readonly requestType: {
                encode(message: LibraryInstallRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryInstallRequest;
                fromJSON(object: any): LibraryInstallRequest;
                toJSON(message: LibraryInstallRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                    noDeps?: boolean | undefined;
                    noOverwrite?: boolean | undefined;
                    installLocation?: import("./lib").LibraryInstallLocation | undefined;
                } | undefined): LibraryInstallRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                    noDeps?: boolean | undefined;
                    noOverwrite?: boolean | undefined;
                    installLocation?: import("./lib").LibraryInstallLocation | undefined;
                }): LibraryInstallRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibraryInstallResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryInstallResponse;
                fromJSON(object: any): LibraryInstallResponse;
                toJSON(message: LibraryInstallResponse): unknown;
                create(base?: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): LibraryInstallResponse;
                fromPartial(object: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): LibraryInstallResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Upgrade a library to the newest version available. */
        readonly libraryUpgrade: {
            readonly name: "LibraryUpgrade";
            readonly requestType: {
                encode(message: LibraryUpgradeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryUpgradeRequest;
                fromJSON(object: any): LibraryUpgradeRequest;
                toJSON(message: LibraryUpgradeRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    noDeps?: boolean | undefined;
                } | undefined): LibraryUpgradeRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    noDeps?: boolean | undefined;
                }): LibraryUpgradeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibraryUpgradeResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryUpgradeResponse;
                fromJSON(object: any): LibraryUpgradeResponse;
                toJSON(message: LibraryUpgradeResponse): unknown;
                create(base?: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): LibraryUpgradeResponse;
                fromPartial(object: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): LibraryUpgradeResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Install a library from a Zip File */
        readonly zipLibraryInstall: {
            readonly name: "ZipLibraryInstall";
            readonly requestType: {
                encode(message: ZipLibraryInstallRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ZipLibraryInstallRequest;
                fromJSON(object: any): ZipLibraryInstallRequest;
                toJSON(message: ZipLibraryInstallRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    path?: string | undefined;
                    overwrite?: boolean | undefined;
                } | undefined): ZipLibraryInstallRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    path?: string | undefined;
                    overwrite?: boolean | undefined;
                }): ZipLibraryInstallRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ZipLibraryInstallResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ZipLibraryInstallResponse;
                fromJSON(object: any): ZipLibraryInstallResponse;
                toJSON(message: ZipLibraryInstallResponse): unknown;
                create(base?: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): ZipLibraryInstallResponse;
                fromPartial(object: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): ZipLibraryInstallResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Download and install a library from a git url */
        readonly gitLibraryInstall: {
            readonly name: "GitLibraryInstall";
            readonly requestType: {
                encode(message: GitLibraryInstallRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GitLibraryInstallRequest;
                fromJSON(object: any): GitLibraryInstallRequest;
                toJSON(message: GitLibraryInstallRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    url?: string | undefined;
                    overwrite?: boolean | undefined;
                } | undefined): GitLibraryInstallRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    url?: string | undefined;
                    overwrite?: boolean | undefined;
                }): GitLibraryInstallRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GitLibraryInstallResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GitLibraryInstallResponse;
                fromJSON(object: any): GitLibraryInstallResponse;
                toJSON(message: GitLibraryInstallResponse): unknown;
                create(base?: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): GitLibraryInstallResponse;
                fromPartial(object: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): GitLibraryInstallResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Uninstall an Arduino library. */
        readonly libraryUninstall: {
            readonly name: "LibraryUninstall";
            readonly requestType: {
                encode(message: LibraryUninstallRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryUninstallRequest;
                fromJSON(object: any): LibraryUninstallRequest;
                toJSON(message: LibraryUninstallRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                } | undefined): LibraryUninstallRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                }): LibraryUninstallRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibraryUninstallResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryUninstallResponse;
                fromJSON(object: any): LibraryUninstallResponse;
                toJSON(message: LibraryUninstallResponse): unknown;
                create(base?: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): LibraryUninstallResponse;
                fromPartial(object: {
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): LibraryUninstallResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Upgrade all installed Arduino libraries to the newest version available. */
        readonly libraryUpgradeAll: {
            readonly name: "LibraryUpgradeAll";
            readonly requestType: {
                encode(message: LibraryUpgradeAllRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryUpgradeAllRequest;
                fromJSON(object: any): LibraryUpgradeAllRequest;
                toJSON(message: LibraryUpgradeAllRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                } | undefined): LibraryUpgradeAllRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                }): LibraryUpgradeAllRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibraryUpgradeAllResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryUpgradeAllResponse;
                fromJSON(object: any): LibraryUpgradeAllResponse;
                toJSON(message: LibraryUpgradeAllResponse): unknown;
                create(base?: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                } | undefined): LibraryUpgradeAllResponse;
                fromPartial(object: {
                    progress?: {
                        message?: ({
                            start?: {
                                url?: string | undefined;
                                label?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "start";
                        }) | ({
                            update?: {
                                downloaded?: number | undefined;
                                totalSize?: number | undefined;
                            } | undefined;
                        } & {
                            $case: "update";
                        }) | ({
                            end?: {
                                success?: boolean | undefined;
                                message?: string | undefined;
                            } | undefined;
                        } & {
                            $case: "end";
                        }) | undefined;
                    } | undefined;
                    taskProgress?: {
                        name?: string | undefined;
                        message?: string | undefined;
                        completed?: boolean | undefined;
                        percent?: number | undefined;
                    } | undefined;
                }): LibraryUpgradeAllResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /**
         * List the recursive dependencies of a library, as defined by the `depends`
         * field of the library.properties files.
         */
        readonly libraryResolveDependencies: {
            readonly name: "LibraryResolveDependencies";
            readonly requestType: {
                encode(message: LibraryResolveDependenciesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryResolveDependenciesRequest;
                fromJSON(object: any): LibraryResolveDependenciesRequest;
                toJSON(message: LibraryResolveDependenciesRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                } | undefined): LibraryResolveDependenciesRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    name?: string | undefined;
                    version?: string | undefined;
                }): LibraryResolveDependenciesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibraryResolveDependenciesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryResolveDependenciesResponse;
                fromJSON(object: any): LibraryResolveDependenciesResponse;
                toJSON(message: LibraryResolveDependenciesResponse): unknown;
                create(base?: {
                    dependencies?: {
                        name?: string | undefined;
                        versionRequired?: string | undefined;
                        versionInstalled?: string | undefined;
                    }[] | undefined;
                } | undefined): LibraryResolveDependenciesResponse;
                fromPartial(object: {
                    dependencies?: {
                        name?: string | undefined;
                        versionRequired?: string | undefined;
                        versionInstalled?: string | undefined;
                    }[] | undefined;
                }): LibraryResolveDependenciesResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Search the Arduino libraries index for libraries. */
        readonly librarySearch: {
            readonly name: "LibrarySearch";
            readonly requestType: {
                encode(message: LibrarySearchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibrarySearchRequest;
                fromJSON(object: any): LibrarySearchRequest;
                toJSON(message: LibrarySearchRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    query?: string | undefined;
                    omitReleasesDetails?: boolean | undefined;
                    searchArgs?: string | undefined;
                } | undefined): LibrarySearchRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    query?: string | undefined;
                    omitReleasesDetails?: boolean | undefined;
                    searchArgs?: string | undefined;
                }): LibrarySearchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibrarySearchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibrarySearchResponse;
                fromJSON(object: any): LibrarySearchResponse;
                toJSON(message: LibrarySearchResponse): unknown;
                create(base?: {
                    libraries?: {
                        name?: string | undefined;
                        releases?: {
                            [x: string]: {
                                author?: string | undefined;
                                version?: string | undefined;
                                maintainer?: string | undefined;
                                sentence?: string | undefined;
                                paragraph?: string | undefined;
                                website?: string | undefined;
                                category?: string | undefined;
                                architectures?: string[] | undefined;
                                types?: string[] | undefined;
                                resources?: {
                                    url?: string | undefined;
                                    archiveFilename?: string | undefined;
                                    checksum?: string | undefined;
                                    size?: number | undefined;
                                    cachePath?: string | undefined;
                                } | undefined;
                                license?: string | undefined;
                                providesIncludes?: string[] | undefined;
                                dependencies?: {
                                    name?: string | undefined;
                                    versionConstraint?: string | undefined;
                                }[] | undefined;
                            } | undefined;
                        } | undefined;
                        latest?: {
                            author?: string | undefined;
                            version?: string | undefined;
                            maintainer?: string | undefined;
                            sentence?: string | undefined;
                            paragraph?: string | undefined;
                            website?: string | undefined;
                            category?: string | undefined;
                            architectures?: string[] | undefined;
                            types?: string[] | undefined;
                            resources?: {
                                url?: string | undefined;
                                archiveFilename?: string | undefined;
                                checksum?: string | undefined;
                                size?: number | undefined;
                                cachePath?: string | undefined;
                            } | undefined;
                            license?: string | undefined;
                            providesIncludes?: string[] | undefined;
                            dependencies?: {
                                name?: string | undefined;
                                versionConstraint?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                        availableVersions?: string[] | undefined;
                    }[] | undefined;
                    status?: import("./lib").LibrarySearchStatus | undefined;
                } | undefined): LibrarySearchResponse;
                fromPartial(object: {
                    libraries?: {
                        name?: string | undefined;
                        releases?: {
                            [x: string]: {
                                author?: string | undefined;
                                version?: string | undefined;
                                maintainer?: string | undefined;
                                sentence?: string | undefined;
                                paragraph?: string | undefined;
                                website?: string | undefined;
                                category?: string | undefined;
                                architectures?: string[] | undefined;
                                types?: string[] | undefined;
                                resources?: {
                                    url?: string | undefined;
                                    archiveFilename?: string | undefined;
                                    checksum?: string | undefined;
                                    size?: number | undefined;
                                    cachePath?: string | undefined;
                                } | undefined;
                                license?: string | undefined;
                                providesIncludes?: string[] | undefined;
                                dependencies?: {
                                    name?: string | undefined;
                                    versionConstraint?: string | undefined;
                                }[] | undefined;
                            } | undefined;
                        } | undefined;
                        latest?: {
                            author?: string | undefined;
                            version?: string | undefined;
                            maintainer?: string | undefined;
                            sentence?: string | undefined;
                            paragraph?: string | undefined;
                            website?: string | undefined;
                            category?: string | undefined;
                            architectures?: string[] | undefined;
                            types?: string[] | undefined;
                            resources?: {
                                url?: string | undefined;
                                archiveFilename?: string | undefined;
                                checksum?: string | undefined;
                                size?: number | undefined;
                                cachePath?: string | undefined;
                            } | undefined;
                            license?: string | undefined;
                            providesIncludes?: string[] | undefined;
                            dependencies?: {
                                name?: string | undefined;
                                versionConstraint?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                        availableVersions?: string[] | undefined;
                    }[] | undefined;
                    status?: import("./lib").LibrarySearchStatus | undefined;
                }): LibrarySearchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** List the installed libraries. */
        readonly libraryList: {
            readonly name: "LibraryList";
            readonly requestType: {
                encode(message: LibraryListRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryListRequest;
                fromJSON(object: any): LibraryListRequest;
                toJSON(message: LibraryListRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    all?: boolean | undefined;
                    updatable?: boolean | undefined;
                    name?: string | undefined;
                    fqbn?: string | undefined;
                } | undefined): LibraryListRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    all?: boolean | undefined;
                    updatable?: boolean | undefined;
                    name?: string | undefined;
                    fqbn?: string | undefined;
                }): LibraryListRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: LibraryListResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LibraryListResponse;
                fromJSON(object: any): LibraryListResponse;
                toJSON(message: LibraryListResponse): unknown;
                create(base?: {
                    installedLibraries?: {
                        library?: {
                            name?: string | undefined;
                            author?: string | undefined;
                            maintainer?: string | undefined;
                            sentence?: string | undefined;
                            paragraph?: string | undefined;
                            website?: string | undefined;
                            category?: string | undefined;
                            architectures?: string[] | undefined;
                            types?: string[] | undefined;
                            installDir?: string | undefined;
                            sourceDir?: string | undefined;
                            utilityDir?: string | undefined;
                            containerPlatform?: string | undefined;
                            dotALinkage?: boolean | undefined;
                            precompiled?: boolean | undefined;
                            ldFlags?: string | undefined;
                            isLegacy?: boolean | undefined;
                            version?: string | undefined;
                            license?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            location?: import("./lib").LibraryLocation | undefined;
                            layout?: import("./lib").LibraryLayout | undefined;
                            examples?: string[] | undefined;
                            providesIncludes?: string[] | undefined;
                            compatibleWith?: {
                                [x: string]: boolean | undefined;
                            } | undefined;
                            inDevelopment?: boolean | undefined;
                        } | undefined;
                        release?: {
                            author?: string | undefined;
                            version?: string | undefined;
                            maintainer?: string | undefined;
                            sentence?: string | undefined;
                            paragraph?: string | undefined;
                            website?: string | undefined;
                            category?: string | undefined;
                            architectures?: string[] | undefined;
                            types?: string[] | undefined;
                            resources?: {
                                url?: string | undefined;
                                archiveFilename?: string | undefined;
                                checksum?: string | undefined;
                                size?: number | undefined;
                                cachePath?: string | undefined;
                            } | undefined;
                            license?: string | undefined;
                            providesIncludes?: string[] | undefined;
                            dependencies?: {
                                name?: string | undefined;
                                versionConstraint?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined): LibraryListResponse;
                fromPartial(object: {
                    installedLibraries?: {
                        library?: {
                            name?: string | undefined;
                            author?: string | undefined;
                            maintainer?: string | undefined;
                            sentence?: string | undefined;
                            paragraph?: string | undefined;
                            website?: string | undefined;
                            category?: string | undefined;
                            architectures?: string[] | undefined;
                            types?: string[] | undefined;
                            installDir?: string | undefined;
                            sourceDir?: string | undefined;
                            utilityDir?: string | undefined;
                            containerPlatform?: string | undefined;
                            dotALinkage?: boolean | undefined;
                            precompiled?: boolean | undefined;
                            ldFlags?: string | undefined;
                            isLegacy?: boolean | undefined;
                            version?: string | undefined;
                            license?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            location?: import("./lib").LibraryLocation | undefined;
                            layout?: import("./lib").LibraryLayout | undefined;
                            examples?: string[] | undefined;
                            providesIncludes?: string[] | undefined;
                            compatibleWith?: {
                                [x: string]: boolean | undefined;
                            } | undefined;
                            inDevelopment?: boolean | undefined;
                        } | undefined;
                        release?: {
                            author?: string | undefined;
                            version?: string | undefined;
                            maintainer?: string | undefined;
                            sentence?: string | undefined;
                            paragraph?: string | undefined;
                            website?: string | undefined;
                            category?: string | undefined;
                            architectures?: string[] | undefined;
                            types?: string[] | undefined;
                            resources?: {
                                url?: string | undefined;
                                archiveFilename?: string | undefined;
                                checksum?: string | undefined;
                                size?: number | undefined;
                                cachePath?: string | undefined;
                            } | undefined;
                            license?: string | undefined;
                            providesIncludes?: string[] | undefined;
                            dependencies?: {
                                name?: string | undefined;
                                versionConstraint?: string | undefined;
                            }[] | undefined;
                        } | undefined;
                    }[] | undefined;
                }): LibraryListResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Open a monitor connection to a board port */
        readonly monitor: {
            readonly name: "Monitor";
            readonly requestType: {
                encode(message: MonitorRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MonitorRequest;
                fromJSON(object: any): MonitorRequest;
                toJSON(message: MonitorRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    txData?: Uint8Array | undefined;
                    portConfiguration?: {
                        settings?: {
                            settingId?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined): MonitorRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    txData?: Uint8Array | undefined;
                    portConfiguration?: {
                        settings?: {
                            settingId?: string | undefined;
                            value?: string | undefined;
                        }[] | undefined;
                    } | undefined;
                }): MonitorRequest;
            };
            readonly requestStream: true;
            readonly responseType: {
                encode(message: MonitorResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MonitorResponse;
                fromJSON(object: any): MonitorResponse;
                toJSON(message: MonitorResponse): unknown;
                create(base?: {
                    error?: string | undefined;
                    rxData?: Uint8Array | undefined;
                    appliedSettings?: {
                        settingId?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                    success?: boolean | undefined;
                } | undefined): MonitorResponse;
                fromPartial(object: {
                    error?: string | undefined;
                    rxData?: Uint8Array | undefined;
                    appliedSettings?: {
                        settingId?: string | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                    success?: boolean | undefined;
                }): MonitorResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Returns the parameters that can be set in the MonitorRequest calls */
        readonly enumerateMonitorPortSettings: {
            readonly name: "EnumerateMonitorPortSettings";
            readonly requestType: {
                encode(message: EnumerateMonitorPortSettingsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): EnumerateMonitorPortSettingsRequest;
                fromJSON(object: any): EnumerateMonitorPortSettingsRequest;
                toJSON(message: EnumerateMonitorPortSettingsRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    portProtocol?: string | undefined;
                    fqbn?: string | undefined;
                } | undefined): EnumerateMonitorPortSettingsRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    portProtocol?: string | undefined;
                    fqbn?: string | undefined;
                }): EnumerateMonitorPortSettingsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: EnumerateMonitorPortSettingsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): EnumerateMonitorPortSettingsResponse;
                fromJSON(object: any): EnumerateMonitorPortSettingsResponse;
                toJSON(message: EnumerateMonitorPortSettingsResponse): unknown;
                create(base?: {
                    settings?: {
                        settingId?: string | undefined;
                        label?: string | undefined;
                        type?: string | undefined;
                        enumValues?: string[] | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                } | undefined): EnumerateMonitorPortSettingsResponse;
                fromPartial(object: {
                    settings?: {
                        settingId?: string | undefined;
                        label?: string | undefined;
                        type?: string | undefined;
                        enumValues?: string[] | undefined;
                        value?: string | undefined;
                    }[] | undefined;
                }): EnumerateMonitorPortSettingsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Start a debug session and communicate with the debugger tool. */
        readonly debug: {
            readonly name: "Debug";
            readonly requestType: {
                encode(message: DebugRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): DebugRequest;
                fromJSON(object: any): DebugRequest;
                toJSON(message: DebugRequest): unknown;
                create(base?: {
                    debugRequest?: {
                        instance?: {
                            id?: number | undefined;
                        } | undefined;
                        fqbn?: string | undefined;
                        sketchPath?: string | undefined;
                        port?: {
                            address?: string | undefined;
                            label?: string | undefined;
                            protocol?: string | undefined;
                            protocolLabel?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            hardwareId?: string | undefined;
                        } | undefined;
                        interpreter?: string | undefined;
                        importDir?: string | undefined;
                        programmer?: string | undefined;
                    } | undefined;
                    data?: Uint8Array | undefined;
                    sendInterrupt?: boolean | undefined;
                } | undefined): DebugRequest;
                fromPartial(object: {
                    debugRequest?: {
                        instance?: {
                            id?: number | undefined;
                        } | undefined;
                        fqbn?: string | undefined;
                        sketchPath?: string | undefined;
                        port?: {
                            address?: string | undefined;
                            label?: string | undefined;
                            protocol?: string | undefined;
                            protocolLabel?: string | undefined;
                            properties?: {
                                [x: string]: string | undefined;
                            } | undefined;
                            hardwareId?: string | undefined;
                        } | undefined;
                        interpreter?: string | undefined;
                        importDir?: string | undefined;
                        programmer?: string | undefined;
                    } | undefined;
                    data?: Uint8Array | undefined;
                    sendInterrupt?: boolean | undefined;
                }): DebugRequest;
            };
            readonly requestStream: true;
            readonly responseType: {
                encode(message: DebugResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): DebugResponse;
                fromJSON(object: any): DebugResponse;
                toJSON(message: DebugResponse): unknown;
                create(base?: {
                    data?: Uint8Array | undefined;
                    error?: string | undefined;
                } | undefined): DebugResponse;
                fromPartial(object: {
                    data?: Uint8Array | undefined;
                    error?: string | undefined;
                }): DebugResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /** Determine if debugging is suported given a specific configuration. */
        readonly isDebugSupported: {
            readonly name: "IsDebugSupported";
            readonly requestType: {
                encode(message: IsDebugSupportedRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): IsDebugSupportedRequest;
                fromJSON(object: any): IsDebugSupportedRequest;
                toJSON(message: IsDebugSupportedRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    interpreter?: string | undefined;
                    programmer?: string | undefined;
                } | undefined): IsDebugSupportedRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    interpreter?: string | undefined;
                    programmer?: string | undefined;
                }): IsDebugSupportedRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: IsDebugSupportedResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): IsDebugSupportedResponse;
                fromJSON(object: any): IsDebugSupportedResponse;
                toJSON(message: IsDebugSupportedResponse): unknown;
                create(base?: {
                    debuggingSupported?: boolean | undefined;
                    debugFqbn?: string | undefined;
                } | undefined): IsDebugSupportedResponse;
                fromPartial(object: {
                    debuggingSupported?: boolean | undefined;
                    debugFqbn?: string | undefined;
                }): IsDebugSupportedResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Query the debugger information given a specific configuration. */
        readonly getDebugConfig: {
            readonly name: "GetDebugConfig";
            readonly requestType: {
                encode(message: GetDebugConfigRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDebugConfigRequest;
                fromJSON(object: any): GetDebugConfigRequest;
                toJSON(message: GetDebugConfigRequest): unknown;
                create(base?: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    interpreter?: string | undefined;
                    importDir?: string | undefined;
                    programmer?: string | undefined;
                } | undefined): GetDebugConfigRequest;
                fromPartial(object: {
                    instance?: {
                        id?: number | undefined;
                    } | undefined;
                    fqbn?: string | undefined;
                    sketchPath?: string | undefined;
                    port?: {
                        address?: string | undefined;
                        label?: string | undefined;
                        protocol?: string | undefined;
                        protocolLabel?: string | undefined;
                        properties?: {
                            [x: string]: string | undefined;
                        } | undefined;
                        hardwareId?: string | undefined;
                    } | undefined;
                    interpreter?: string | undefined;
                    importDir?: string | undefined;
                    programmer?: string | undefined;
                }): GetDebugConfigRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetDebugConfigResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: Uint8Array | _m0.Reader, length?: number | undefined): GetDebugConfigResponse;
                fromJSON(object: any): GetDebugConfigResponse;
                toJSON(message: GetDebugConfigResponse): unknown;
                create(base?: {
                    executable?: string | undefined;
                    toolchain?: string | undefined;
                    toolchainPath?: string | undefined;
                    toolchainPrefix?: string | undefined;
                    server?: string | undefined;
                    serverPath?: string | undefined;
                    toolchainConfiguration?: {
                        typeUrl?: string | undefined;
                        value?: Uint8Array | undefined;
                    } | undefined;
                    serverConfiguration?: {
                        typeUrl?: string | undefined;
                        value?: Uint8Array | undefined;
                    } | undefined;
                    customConfigs?: {
                        [x: string]: string | undefined;
                    } | undefined;
                    svdFile?: string | undefined;
                    programmer?: string | undefined;
                } | undefined): GetDebugConfigResponse;
                fromPartial(object: {
                    executable?: string | undefined;
                    toolchain?: string | undefined;
                    toolchainPath?: string | undefined;
                    toolchainPrefix?: string | undefined;
                    server?: string | undefined;
                    serverPath?: string | undefined;
                    toolchainConfiguration?: {
                        typeUrl?: string | undefined;
                        value?: Uint8Array | undefined;
                    } | undefined;
                    serverConfiguration?: {
                        typeUrl?: string | undefined;
                        value?: Uint8Array | undefined;
                    } | undefined;
                    customConfigs?: {
                        [x: string]: string | undefined;
                    } | undefined;
                    svdFile?: string | undefined;
                    programmer?: string | undefined;
                }): GetDebugConfigResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface ArduinoCoreServiceImplementation<CallContextExt = {}> {
    /** Create a new Arduino Core instance */
    create(request: CreateRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CreateResponse>>;
    /**
     * Initializes an existing Arduino Core instance by loading platforms and
     * libraries
     */
    init(request: InitRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<InitResponse>>;
    /** Destroy an instance of the Arduino Core Service */
    destroy(request: DestroyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<DestroyResponse>>;
    /** Update package index of the Arduino Core Service */
    updateIndex(request: UpdateIndexRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<UpdateIndexResponse>>;
    /** Update libraries index */
    updateLibrariesIndex(request: UpdateLibrariesIndexRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<UpdateLibrariesIndexResponse>>;
    /** Get the version of Arduino CLI in use. */
    version(request: VersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VersionResponse>>;
    /** Create a new Sketch */
    newSketch(request: NewSketchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<NewSketchResponse>>;
    /** Returns all files composing a Sketch */
    loadSketch(request: LoadSketchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LoadSketchResponse>>;
    /** Creates a zip file containing all files of specified Sketch */
    archiveSketch(request: ArchiveSketchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ArchiveSketchResponse>>;
    /**
     * Sets the sketch default FQBN and Port Address/Protocol in
     * the sketch project file (sketch.yaml). These metadata can be retrieved
     * using LoadSketch.
     */
    setSketchDefaults(request: SetSketchDefaultsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SetSketchDefaultsResponse>>;
    /** Requests details about a board */
    boardDetails(request: BoardDetailsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BoardDetailsResponse>>;
    /** List the boards currently connected to the computer. */
    boardList(request: BoardListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BoardListResponse>>;
    /** List all the boards provided by installed platforms. */
    boardListAll(request: BoardListAllRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BoardListAllResponse>>;
    /** Search boards in installed and not installed Platforms. */
    boardSearch(request: BoardSearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BoardSearchResponse>>;
    /** List boards connection and disconnected events. */
    boardListWatch(request: BoardListWatchRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<BoardListWatchResponse>>;
    /** Compile an Arduino sketch. */
    compile(request: CompileRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<CompileResponse>>;
    /** Download and install a platform and its tool dependencies. */
    platformInstall(request: PlatformInstallRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<PlatformInstallResponse>>;
    /**
     * Download a platform and its tool dependencies to the `staging/packages`
     * subdirectory of the data directory.
     */
    platformDownload(request: PlatformDownloadRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<PlatformDownloadResponse>>;
    /**
     * Uninstall a platform as well as its tool dependencies that are not used by
     * other installed platforms.
     */
    platformUninstall(request: PlatformUninstallRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<PlatformUninstallResponse>>;
    /** Upgrade an installed platform to the latest version. */
    platformUpgrade(request: PlatformUpgradeRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<PlatformUpgradeResponse>>;
    /** Upload a compiled sketch to a board. */
    upload(request: UploadRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<UploadResponse>>;
    /** Upload a compiled sketch to a board using a programmer. */
    uploadUsingProgrammer(request: UploadUsingProgrammerRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<UploadUsingProgrammerResponse>>;
    /**
     * Returns the list of users fields necessary to upload to that board
     * using the specified protocol.
     */
    supportedUserFields(request: SupportedUserFieldsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SupportedUserFieldsResponse>>;
    /** List programmers available for a board. */
    listProgrammersAvailableForUpload(request: ListProgrammersAvailableForUploadRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListProgrammersAvailableForUploadResponse>>;
    /** Burn bootloader to a board. */
    burnBootloader(request: BurnBootloaderRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<BurnBootloaderResponse>>;
    /** Search for a platform in the platforms indexes. */
    platformSearch(request: PlatformSearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PlatformSearchResponse>>;
    /** List all installed platforms. */
    platformList(request: PlatformListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<PlatformListResponse>>;
    /**
     * Download the archive file of an Arduino library in the libraries index to
     * the staging directory.
     */
    libraryDownload(request: LibraryDownloadRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<LibraryDownloadResponse>>;
    /** Download and install an Arduino library from the libraries index. */
    libraryInstall(request: LibraryInstallRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<LibraryInstallResponse>>;
    /** Upgrade a library to the newest version available. */
    libraryUpgrade(request: LibraryUpgradeRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<LibraryUpgradeResponse>>;
    /** Install a library from a Zip File */
    zipLibraryInstall(request: ZipLibraryInstallRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<ZipLibraryInstallResponse>>;
    /** Download and install a library from a git url */
    gitLibraryInstall(request: GitLibraryInstallRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<GitLibraryInstallResponse>>;
    /** Uninstall an Arduino library. */
    libraryUninstall(request: LibraryUninstallRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<LibraryUninstallResponse>>;
    /** Upgrade all installed Arduino libraries to the newest version available. */
    libraryUpgradeAll(request: LibraryUpgradeAllRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<LibraryUpgradeAllResponse>>;
    /**
     * List the recursive dependencies of a library, as defined by the `depends`
     * field of the library.properties files.
     */
    libraryResolveDependencies(request: LibraryResolveDependenciesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LibraryResolveDependenciesResponse>>;
    /** Search the Arduino libraries index for libraries. */
    librarySearch(request: LibrarySearchRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LibrarySearchResponse>>;
    /** List the installed libraries. */
    libraryList(request: LibraryListRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LibraryListResponse>>;
    /** Open a monitor connection to a board port */
    monitor(request: AsyncIterable<MonitorRequest>, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<MonitorResponse>>;
    /** Returns the parameters that can be set in the MonitorRequest calls */
    enumerateMonitorPortSettings(request: EnumerateMonitorPortSettingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<EnumerateMonitorPortSettingsResponse>>;
    /** Start a debug session and communicate with the debugger tool. */
    debug(request: AsyncIterable<DebugRequest>, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<DebugResponse>>;
    /** Determine if debugging is suported given a specific configuration. */
    isDebugSupported(request: IsDebugSupportedRequest, context: CallContext & CallContextExt): Promise<DeepPartial<IsDebugSupportedResponse>>;
    /** Query the debugger information given a specific configuration. */
    getDebugConfig(request: GetDebugConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetDebugConfigResponse>>;
}
export interface ArduinoCoreServiceClient<CallOptionsExt = {}> {
    /** Create a new Arduino Core instance */
    create(request: DeepPartial<CreateRequest>, options?: CallOptions & CallOptionsExt): Promise<CreateResponse>;
    /**
     * Initializes an existing Arduino Core instance by loading platforms and
     * libraries
     */
    init(request: DeepPartial<InitRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<InitResponse>;
    /** Destroy an instance of the Arduino Core Service */
    destroy(request: DeepPartial<DestroyRequest>, options?: CallOptions & CallOptionsExt): Promise<DestroyResponse>;
    /** Update package index of the Arduino Core Service */
    updateIndex(request: DeepPartial<UpdateIndexRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<UpdateIndexResponse>;
    /** Update libraries index */
    updateLibrariesIndex(request: DeepPartial<UpdateLibrariesIndexRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<UpdateLibrariesIndexResponse>;
    /** Get the version of Arduino CLI in use. */
    version(request: DeepPartial<VersionRequest>, options?: CallOptions & CallOptionsExt): Promise<VersionResponse>;
    /** Create a new Sketch */
    newSketch(request: DeepPartial<NewSketchRequest>, options?: CallOptions & CallOptionsExt): Promise<NewSketchResponse>;
    /** Returns all files composing a Sketch */
    loadSketch(request: DeepPartial<LoadSketchRequest>, options?: CallOptions & CallOptionsExt): Promise<LoadSketchResponse>;
    /** Creates a zip file containing all files of specified Sketch */
    archiveSketch(request: DeepPartial<ArchiveSketchRequest>, options?: CallOptions & CallOptionsExt): Promise<ArchiveSketchResponse>;
    /**
     * Sets the sketch default FQBN and Port Address/Protocol in
     * the sketch project file (sketch.yaml). These metadata can be retrieved
     * using LoadSketch.
     */
    setSketchDefaults(request: DeepPartial<SetSketchDefaultsRequest>, options?: CallOptions & CallOptionsExt): Promise<SetSketchDefaultsResponse>;
    /** Requests details about a board */
    boardDetails(request: DeepPartial<BoardDetailsRequest>, options?: CallOptions & CallOptionsExt): Promise<BoardDetailsResponse>;
    /** List the boards currently connected to the computer. */
    boardList(request: DeepPartial<BoardListRequest>, options?: CallOptions & CallOptionsExt): Promise<BoardListResponse>;
    /** List all the boards provided by installed platforms. */
    boardListAll(request: DeepPartial<BoardListAllRequest>, options?: CallOptions & CallOptionsExt): Promise<BoardListAllResponse>;
    /** Search boards in installed and not installed Platforms. */
    boardSearch(request: DeepPartial<BoardSearchRequest>, options?: CallOptions & CallOptionsExt): Promise<BoardSearchResponse>;
    /** List boards connection and disconnected events. */
    boardListWatch(request: DeepPartial<BoardListWatchRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<BoardListWatchResponse>;
    /** Compile an Arduino sketch. */
    compile(request: DeepPartial<CompileRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<CompileResponse>;
    /** Download and install a platform and its tool dependencies. */
    platformInstall(request: DeepPartial<PlatformInstallRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<PlatformInstallResponse>;
    /**
     * Download a platform and its tool dependencies to the `staging/packages`
     * subdirectory of the data directory.
     */
    platformDownload(request: DeepPartial<PlatformDownloadRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<PlatformDownloadResponse>;
    /**
     * Uninstall a platform as well as its tool dependencies that are not used by
     * other installed platforms.
     */
    platformUninstall(request: DeepPartial<PlatformUninstallRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<PlatformUninstallResponse>;
    /** Upgrade an installed platform to the latest version. */
    platformUpgrade(request: DeepPartial<PlatformUpgradeRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<PlatformUpgradeResponse>;
    /** Upload a compiled sketch to a board. */
    upload(request: DeepPartial<UploadRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<UploadResponse>;
    /** Upload a compiled sketch to a board using a programmer. */
    uploadUsingProgrammer(request: DeepPartial<UploadUsingProgrammerRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<UploadUsingProgrammerResponse>;
    /**
     * Returns the list of users fields necessary to upload to that board
     * using the specified protocol.
     */
    supportedUserFields(request: DeepPartial<SupportedUserFieldsRequest>, options?: CallOptions & CallOptionsExt): Promise<SupportedUserFieldsResponse>;
    /** List programmers available for a board. */
    listProgrammersAvailableForUpload(request: DeepPartial<ListProgrammersAvailableForUploadRequest>, options?: CallOptions & CallOptionsExt): Promise<ListProgrammersAvailableForUploadResponse>;
    /** Burn bootloader to a board. */
    burnBootloader(request: DeepPartial<BurnBootloaderRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<BurnBootloaderResponse>;
    /** Search for a platform in the platforms indexes. */
    platformSearch(request: DeepPartial<PlatformSearchRequest>, options?: CallOptions & CallOptionsExt): Promise<PlatformSearchResponse>;
    /** List all installed platforms. */
    platformList(request: DeepPartial<PlatformListRequest>, options?: CallOptions & CallOptionsExt): Promise<PlatformListResponse>;
    /**
     * Download the archive file of an Arduino library in the libraries index to
     * the staging directory.
     */
    libraryDownload(request: DeepPartial<LibraryDownloadRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<LibraryDownloadResponse>;
    /** Download and install an Arduino library from the libraries index. */
    libraryInstall(request: DeepPartial<LibraryInstallRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<LibraryInstallResponse>;
    /** Upgrade a library to the newest version available. */
    libraryUpgrade(request: DeepPartial<LibraryUpgradeRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<LibraryUpgradeResponse>;
    /** Install a library from a Zip File */
    zipLibraryInstall(request: DeepPartial<ZipLibraryInstallRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<ZipLibraryInstallResponse>;
    /** Download and install a library from a git url */
    gitLibraryInstall(request: DeepPartial<GitLibraryInstallRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<GitLibraryInstallResponse>;
    /** Uninstall an Arduino library. */
    libraryUninstall(request: DeepPartial<LibraryUninstallRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<LibraryUninstallResponse>;
    /** Upgrade all installed Arduino libraries to the newest version available. */
    libraryUpgradeAll(request: DeepPartial<LibraryUpgradeAllRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<LibraryUpgradeAllResponse>;
    /**
     * List the recursive dependencies of a library, as defined by the `depends`
     * field of the library.properties files.
     */
    libraryResolveDependencies(request: DeepPartial<LibraryResolveDependenciesRequest>, options?: CallOptions & CallOptionsExt): Promise<LibraryResolveDependenciesResponse>;
    /** Search the Arduino libraries index for libraries. */
    librarySearch(request: DeepPartial<LibrarySearchRequest>, options?: CallOptions & CallOptionsExt): Promise<LibrarySearchResponse>;
    /** List the installed libraries. */
    libraryList(request: DeepPartial<LibraryListRequest>, options?: CallOptions & CallOptionsExt): Promise<LibraryListResponse>;
    /** Open a monitor connection to a board port */
    monitor(request: AsyncIterable<DeepPartial<MonitorRequest>>, options?: CallOptions & CallOptionsExt): AsyncIterable<MonitorResponse>;
    /** Returns the parameters that can be set in the MonitorRequest calls */
    enumerateMonitorPortSettings(request: DeepPartial<EnumerateMonitorPortSettingsRequest>, options?: CallOptions & CallOptionsExt): Promise<EnumerateMonitorPortSettingsResponse>;
    /** Start a debug session and communicate with the debugger tool. */
    debug(request: AsyncIterable<DeepPartial<DebugRequest>>, options?: CallOptions & CallOptionsExt): AsyncIterable<DebugResponse>;
    /** Determine if debugging is suported given a specific configuration. */
    isDebugSupported(request: DeepPartial<IsDebugSupportedRequest>, options?: CallOptions & CallOptionsExt): Promise<IsDebugSupportedResponse>;
    /** Query the debugger information given a specific configuration. */
    getDebugConfig(request: DeepPartial<GetDebugConfigRequest>, options?: CallOptions & CallOptionsExt): Promise<GetDebugConfigResponse>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, '$case'>]?: DeepPartial<T[K]>;
} & {
    $case: T['$case'];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare type ServerStreamingMethodResult<Response> = {
    [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};
export {};
//# sourceMappingURL=commands.d.ts.map