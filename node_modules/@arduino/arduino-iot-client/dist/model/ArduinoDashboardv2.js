"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoDashboardowner = _interopRequireDefault(require("./ArduinoDashboardowner"));
var _ArduinoDashboardshare = _interopRequireDefault(require("./ArduinoDashboardshare"));
var _ArduinoWidgetv = _interopRequireDefault(require("./ArduinoWidgetv2"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Arduino IoT Cloud API
                                                                                                                                                                                                                                                                                                                                                                                               *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0
                                                                                                                                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The ArduinoDashboardv2 model module.
 * @module model/ArduinoDashboardv2
 * @version 2.0.0
 */
var ArduinoDashboardv2 = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ArduinoDashboardv2</code>.
   * Dashboard is a collection of widgets (default view)
   * @alias module:model/ArduinoDashboardv2
   * @param id {String} The friendly name of the dashboard
   * @param name {String} The friendly name of the dashboard
   * @param updatedAt {Date} Last update date
   */
  function ArduinoDashboardv2(id, name, updatedAt) {
    _classCallCheck(this, ArduinoDashboardv2);
    ArduinoDashboardv2.initialize(this, id, name, updatedAt);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(ArduinoDashboardv2, null, [{
    key: "initialize",
    value: function initialize(obj, id, name, updatedAt) {
      obj['id'] = id;
      obj['name'] = name;
      obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>ArduinoDashboardv2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoDashboardv2} obj Optional instance to populate.
     * @return {module:model/ArduinoDashboardv2} The populated <code>ArduinoDashboardv2</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoDashboardv2();
        if (data.hasOwnProperty('created_by')) {
          obj['created_by'] = _ArduinoDashboardowner["default"].constructFromObject(data['created_by']);
        }
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('organization_id')) {
          obj['organization_id'] = _ApiClient["default"].convertToType(data['organization_id'], 'String');
        }
        if (data.hasOwnProperty('shared_by')) {
          obj['shared_by'] = _ArduinoDashboardshare["default"].constructFromObject(data['shared_by']);
        }
        if (data.hasOwnProperty('shared_with')) {
          obj['shared_with'] = _ApiClient["default"].convertToType(data['shared_with'], [_ArduinoDashboardshare["default"]]);
        }
        if (data.hasOwnProperty('updated_at')) {
          obj['updated_at'] = _ApiClient["default"].convertToType(data['updated_at'], 'Date');
        }
        if (data.hasOwnProperty('widgets')) {
          obj['widgets'] = _ApiClient["default"].convertToType(data['widgets'], [_ArduinoWidgetv["default"]]);
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoDashboardv2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoDashboardv2</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(ArduinoDashboardv2.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // validate the optional field `created_by`
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['created_by']) {
        // data not null
        _ArduinoDashboardowner["default"].validateJSON(data['created_by']);
      }
      // ensure the json data is a string
      if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
        throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
      }
      // ensure the json data is a string
      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      }
      // ensure the json data is a string
      if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
        throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
      }
      // validate the optional field `shared_by`
      if (data['shared_by']) {
        // data not null
        _ArduinoDashboardshare["default"].validateJSON(data['shared_by']);
      }
      if (data['shared_with']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['shared_with'])) {
          throw new Error("Expected the field `shared_with` to be an array in the JSON data but got " + data['shared_with']);
        }
        // validate the optional field `shared_with` (array)
        var _iterator2 = _createForOfIteratorHelper(data['shared_with']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _ArduinoDashboardshare["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      if (data['widgets']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['widgets'])) {
          throw new Error("Expected the field `widgets` to be an array in the JSON data but got " + data['widgets']);
        }
        // validate the optional field `widgets` (array)
        var _iterator3 = _createForOfIteratorHelper(data['widgets']),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _item = _step3.value;
            _ArduinoWidgetv["default"].validateJSON(_item);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        ;
      }
      return true;
    }
  }]);
  return ArduinoDashboardv2;
}();
ArduinoDashboardv2.RequiredProperties = ["id", "name", "updated_at"];

/**
 * @member {module:model/ArduinoDashboardowner} created_by
 */
ArduinoDashboardv2.prototype['created_by'] = undefined;

/**
 * The friendly name of the dashboard
 * @member {String} id
 */
ArduinoDashboardv2.prototype['id'] = undefined;

/**
 * The friendly name of the dashboard
 * @member {String} name
 */
ArduinoDashboardv2.prototype['name'] = undefined;

/**
 * Id of the organization the dashboard belongs to
 * @member {String} organization_id
 */
ArduinoDashboardv2.prototype['organization_id'] = undefined;

/**
 * @member {module:model/ArduinoDashboardshare} shared_by
 */
ArduinoDashboardv2.prototype['shared_by'] = undefined;

/**
 * ArduinoDashboardshareCollection is the media type for an array of ArduinoDashboardshare (default view)
 * @member {Array.<module:model/ArduinoDashboardshare>} shared_with
 */
ArduinoDashboardv2.prototype['shared_with'] = undefined;

/**
 * Last update date
 * @member {Date} updated_at
 */
ArduinoDashboardv2.prototype['updated_at'] = undefined;

/**
 * ArduinoWidgetv2Collection is the media type for an array of ArduinoWidgetv2 (default view)
 * @member {Array.<module:model/ArduinoWidgetv2>} widgets
 */
ArduinoDashboardv2.prototype['widgets'] = undefined;
var _default = exports["default"] = ArduinoDashboardv2;