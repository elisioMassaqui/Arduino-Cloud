"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoLinkedvariable = _interopRequireDefault(require("./ArduinoLinkedvariable"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Arduino IoT Cloud API
                                                                                                                                                                                                                                                                                                                                                                                               *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0
                                                                                                                                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The ArduinoWidgetv2 model module.
 * @module model/ArduinoWidgetv2
 * @version 2.0.0
 */
var ArduinoWidgetv2 = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ArduinoWidgetv2</code>.
   * Widget describes a dashboard widget (default view)
   * @alias module:model/ArduinoWidgetv2
   * @param height {Number} Widget current height for desktop
   * @param id {String} The UUID of the widget, set by client
   * @param options {Object.<String, Object>} Widget options
   * @param type {module:model/ArduinoWidgetv2.TypeEnum} The type of the widget
   * @param width {Number} Widget current width for desktop
   * @param x {Number} Widget x position for desktop
   * @param y {Number} Widget y position for desktop
   */
  function ArduinoWidgetv2(height, id, options, type, width, x, y) {
    _classCallCheck(this, ArduinoWidgetv2);
    ArduinoWidgetv2.initialize(this, height, id, options, type, width, x, y);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(ArduinoWidgetv2, null, [{
    key: "initialize",
    value: function initialize(obj, height, id, options, type, width, x, y) {
      obj['height'] = height;
      obj['id'] = id;
      obj['options'] = options;
      obj['type'] = type;
      obj['width'] = width;
      obj['x'] = x;
      obj['y'] = y;
    }

    /**
     * Constructs a <code>ArduinoWidgetv2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoWidgetv2} obj Optional instance to populate.
     * @return {module:model/ArduinoWidgetv2} The populated <code>ArduinoWidgetv2</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoWidgetv2();
        if (data.hasOwnProperty('has_permission_incompatibility')) {
          obj['has_permission_incompatibility'] = _ApiClient["default"].convertToType(data['has_permission_incompatibility'], 'Boolean');
        }
        if (data.hasOwnProperty('has_type_incompatibility')) {
          obj['has_type_incompatibility'] = _ApiClient["default"].convertToType(data['has_type_incompatibility'], 'Boolean');
        }
        if (data.hasOwnProperty('has_unlinked_variable')) {
          obj['has_unlinked_variable'] = _ApiClient["default"].convertToType(data['has_unlinked_variable'], 'Boolean');
        }
        if (data.hasOwnProperty('height')) {
          obj['height'] = _ApiClient["default"].convertToType(data['height'], 'Number');
        }
        if (data.hasOwnProperty('height_mobile')) {
          obj['height_mobile'] = _ApiClient["default"].convertToType(data['height_mobile'], 'Number');
        }
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('options')) {
          obj['options'] = _ApiClient["default"].convertToType(data['options'], {
            'String': Object
          });
        }
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('variables')) {
          obj['variables'] = _ApiClient["default"].convertToType(data['variables'], [_ArduinoLinkedvariable["default"]]);
        }
        if (data.hasOwnProperty('width')) {
          obj['width'] = _ApiClient["default"].convertToType(data['width'], 'Number');
        }
        if (data.hasOwnProperty('width_mobile')) {
          obj['width_mobile'] = _ApiClient["default"].convertToType(data['width_mobile'], 'Number');
        }
        if (data.hasOwnProperty('x')) {
          obj['x'] = _ApiClient["default"].convertToType(data['x'], 'Number');
        }
        if (data.hasOwnProperty('x_mobile')) {
          obj['x_mobile'] = _ApiClient["default"].convertToType(data['x_mobile'], 'Number');
        }
        if (data.hasOwnProperty('y')) {
          obj['y'] = _ApiClient["default"].convertToType(data['y'], 'Number');
        }
        if (data.hasOwnProperty('y_mobile')) {
          obj['y_mobile'] = _ApiClient["default"].convertToType(data['y_mobile'], 'Number');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoWidgetv2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoWidgetv2</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(ArduinoWidgetv2.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
        throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
      }
      // ensure the json data is a string
      if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
        throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
      }
      // ensure the json data is a string
      if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
        throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
      }
      if (data['variables']) {
        // data not null
        // ensure the json data is an array
        if (!Array.isArray(data['variables'])) {
          throw new Error("Expected the field `variables` to be an array in the JSON data but got " + data['variables']);
        }
        // validate the optional field `variables` (array)
        var _iterator2 = _createForOfIteratorHelper(data['variables']),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;
            _ArduinoLinkedvariable["default"].validateJSON(item);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        ;
      }
      return true;
    }
  }]);
  return ArduinoWidgetv2;
}();
ArduinoWidgetv2.RequiredProperties = ["height", "id", "options", "type", "width", "x", "y"];

/**
 * True if the linked variables permissions are incompatible with the widget
 * @member {Boolean} has_permission_incompatibility
 */
ArduinoWidgetv2.prototype['has_permission_incompatibility'] = undefined;

/**
 * True if the linked variables types are incompatible with the widget
 * @member {Boolean} has_type_incompatibility
 */
ArduinoWidgetv2.prototype['has_type_incompatibility'] = undefined;

/**
 * If it's true the widget is linked to a soft-deleted variable
 * @member {Boolean} has_unlinked_variable
 */
ArduinoWidgetv2.prototype['has_unlinked_variable'] = undefined;

/**
 * Widget current height for desktop
 * @member {Number} height
 */
ArduinoWidgetv2.prototype['height'] = undefined;

/**
 * Widget current height for mobile
 * @member {Number} height_mobile
 */
ArduinoWidgetv2.prototype['height_mobile'] = undefined;

/**
 * The UUID of the widget, set by client
 * @member {String} id
 */
ArduinoWidgetv2.prototype['id'] = undefined;

/**
 * The name of the widget
 * @member {String} name
 */
ArduinoWidgetv2.prototype['name'] = undefined;

/**
 * Widget options
 * @member {Object.<String, Object>} options
 */
ArduinoWidgetv2.prototype['options'] = undefined;

/**
 * The type of the widget
 * @member {module:model/ArduinoWidgetv2.TypeEnum} type
 */
ArduinoWidgetv2.prototype['type'] = undefined;

/**
 * ArduinoLinkedvariableCollection is the media type for an array of ArduinoLinkedvariable (default view)
 * @member {Array.<module:model/ArduinoLinkedvariable>} variables
 */
ArduinoWidgetv2.prototype['variables'] = undefined;

/**
 * Widget current width for desktop
 * @member {Number} width
 */
ArduinoWidgetv2.prototype['width'] = undefined;

/**
 * Widget current width for mobile
 * @member {Number} width_mobile
 */
ArduinoWidgetv2.prototype['width_mobile'] = undefined;

/**
 * Widget x position for desktop
 * @member {Number} x
 */
ArduinoWidgetv2.prototype['x'] = undefined;

/**
 * Widget x position for mobile
 * @member {Number} x_mobile
 */
ArduinoWidgetv2.prototype['x_mobile'] = undefined;

/**
 * Widget y position for desktop
 * @member {Number} y
 */
ArduinoWidgetv2.prototype['y'] = undefined;

/**
 * Widget y position for mobile
 * @member {Number} y_mobile
 */
ArduinoWidgetv2.prototype['y_mobile'] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ArduinoWidgetv2['TypeEnum'] = {
  /**
   * value: "slider, gauge"
   * @const
   */
  "slider, gauge": "slider, gauge"
};
var _default = exports["default"] = ArduinoWidgetv2;