"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoCompressedv = _interopRequireDefault(require("./ArduinoCompressedv2"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Arduino IoT Cloud API
                                                                                                                                                                                                                                                                                                                                                                                               *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0
                                                                                                                                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The ArduinoDevicev2Cert model module.
 * @module model/ArduinoDevicev2Cert
 * @version 2.0.0
 */
var ArduinoDevicev2Cert = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ArduinoDevicev2Cert</code>.
   * DeviceCertV2 describes a certificate associated to the device (default view)
   * @alias module:model/ArduinoDevicev2Cert
   * @param compressed {module:model/ArduinoCompressedv2} 
   * @param der {String} The certificate in DER format
   * @param deviceId {String} The unique identifier of the device
   * @param enabled {Boolean} Whether the certificate is enabled
   * @param href {String} The api reference of this cert
   * @param id {String} The unique identifier of the key
   * @param pem {String} The certificate in pem format
   */
  function ArduinoDevicev2Cert(compressed, der, deviceId, enabled, href, id, pem) {
    _classCallCheck(this, ArduinoDevicev2Cert);
    ArduinoDevicev2Cert.initialize(this, compressed, der, deviceId, enabled, href, id, pem);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(ArduinoDevicev2Cert, null, [{
    key: "initialize",
    value: function initialize(obj, compressed, der, deviceId, enabled, href, id, pem) {
      obj['compressed'] = compressed;
      obj['der'] = der;
      obj['device_id'] = deviceId;
      obj['enabled'] = enabled || true;
      obj['href'] = href;
      obj['id'] = id;
      obj['pem'] = pem;
    }

    /**
     * Constructs a <code>ArduinoDevicev2Cert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoDevicev2Cert} obj Optional instance to populate.
     * @return {module:model/ArduinoDevicev2Cert} The populated <code>ArduinoDevicev2Cert</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoDevicev2Cert();
        if (data.hasOwnProperty('ca')) {
          obj['ca'] = _ApiClient["default"].convertToType(data['ca'], 'String');
        }
        if (data.hasOwnProperty('compressed')) {
          obj['compressed'] = _ArduinoCompressedv["default"].constructFromObject(data['compressed']);
        }
        if (data.hasOwnProperty('der')) {
          obj['der'] = _ApiClient["default"].convertToType(data['der'], 'String');
        }
        if (data.hasOwnProperty('device_id')) {
          obj['device_id'] = _ApiClient["default"].convertToType(data['device_id'], 'String');
        }
        if (data.hasOwnProperty('enabled')) {
          obj['enabled'] = _ApiClient["default"].convertToType(data['enabled'], 'Boolean');
        }
        if (data.hasOwnProperty('href')) {
          obj['href'] = _ApiClient["default"].convertToType(data['href'], 'String');
        }
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('pem')) {
          obj['pem'] = _ApiClient["default"].convertToType(data['pem'], 'String');
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoDevicev2Cert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoDevicev2Cert</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(ArduinoDevicev2Cert.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['ca'] && !(typeof data['ca'] === 'string' || data['ca'] instanceof String)) {
        throw new Error("Expected the field `ca` to be a primitive type in the JSON string but got " + data['ca']);
      }
      // validate the optional field `compressed`
      if (data['compressed']) {
        // data not null
        _ArduinoCompressedv["default"].validateJSON(data['compressed']);
      }
      // ensure the json data is a string
      if (data['der'] && !(typeof data['der'] === 'string' || data['der'] instanceof String)) {
        throw new Error("Expected the field `der` to be a primitive type in the JSON string but got " + data['der']);
      }
      // ensure the json data is a string
      if (data['device_id'] && !(typeof data['device_id'] === 'string' || data['device_id'] instanceof String)) {
        throw new Error("Expected the field `device_id` to be a primitive type in the JSON string but got " + data['device_id']);
      }
      // ensure the json data is a string
      if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
        throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
      }
      // ensure the json data is a string
      if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
        throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
      }
      // ensure the json data is a string
      if (data['pem'] && !(typeof data['pem'] === 'string' || data['pem'] instanceof String)) {
        throw new Error("Expected the field `pem` to be a primitive type in the JSON string but got " + data['pem']);
      }
      return true;
    }
  }]);
  return ArduinoDevicev2Cert;
}();
ArduinoDevicev2Cert.RequiredProperties = ["compressed", "der", "device_id", "enabled", "href", "id", "pem"];

/**
 * The Certification Authority used to sign the certificate
 * @member {String} ca
 */
ArduinoDevicev2Cert.prototype['ca'] = undefined;

/**
 * @member {module:model/ArduinoCompressedv2} compressed
 */
ArduinoDevicev2Cert.prototype['compressed'] = undefined;

/**
 * The certificate in DER format
 * @member {String} der
 */
ArduinoDevicev2Cert.prototype['der'] = undefined;

/**
 * The unique identifier of the device
 * @member {String} device_id
 */
ArduinoDevicev2Cert.prototype['device_id'] = undefined;

/**
 * Whether the certificate is enabled
 * @member {Boolean} enabled
 * @default true
 */
ArduinoDevicev2Cert.prototype['enabled'] = true;

/**
 * The api reference of this cert
 * @member {String} href
 */
ArduinoDevicev2Cert.prototype['href'] = undefined;

/**
 * The unique identifier of the key
 * @member {String} id
 */
ArduinoDevicev2Cert.prototype['id'] = undefined;

/**
 * The certificate in pem format
 * @member {String} pem
 */
ArduinoDevicev2Cert.prototype['pem'] = undefined;
var _default = exports["default"] = ArduinoDevicev2Cert;