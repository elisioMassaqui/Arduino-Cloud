"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Arduino IoT Cloud API
                                                                                                                                                                                                                                                                                                                                                                                               *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0
                                                                                                                                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The ArduinoSeriesResponse model module.
 * @module model/ArduinoSeriesResponse
 * @version 2.0.0
 */
var ArduinoSeriesResponse = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ArduinoSeriesResponse</code>.
   * ArduinoSeriesResponse media type (default view)
   * @alias module:model/ArduinoSeriesResponse
   * @param countValues {Number} Total number of values in the array 'values'
   * @param fromDate {Date} From date
   * @param interval {Number} Resolution in seconds
   * @param query {String} Query of for the data
   * @param respVersion {Number} Response version
   * @param status {String} Status of the response
   * @param times {Array.<Date>} Timestamp in RFC3339
   * @param toDate {Date} To date
   * @param values {Array.<Number>} Values in Float
   */
  function ArduinoSeriesResponse(countValues, fromDate, interval, query, respVersion, status, times, toDate, values) {
    _classCallCheck(this, ArduinoSeriesResponse);
    ArduinoSeriesResponse.initialize(this, countValues, fromDate, interval, query, respVersion, status, times, toDate, values);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(ArduinoSeriesResponse, null, [{
    key: "initialize",
    value: function initialize(obj, countValues, fromDate, interval, query, respVersion, status, times, toDate, values) {
      obj['count_values'] = countValues;
      obj['from_date'] = fromDate;
      obj['interval'] = interval;
      obj['query'] = query;
      obj['resp_version'] = respVersion;
      obj['status'] = status;
      obj['times'] = times;
      obj['to_date'] = toDate;
      obj['values'] = values;
    }

    /**
     * Constructs a <code>ArduinoSeriesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArduinoSeriesResponse} obj Optional instance to populate.
     * @return {module:model/ArduinoSeriesResponse} The populated <code>ArduinoSeriesResponse</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ArduinoSeriesResponse();
        if (data.hasOwnProperty('count_values')) {
          obj['count_values'] = _ApiClient["default"].convertToType(data['count_values'], 'Number');
        }
        if (data.hasOwnProperty('from_date')) {
          obj['from_date'] = _ApiClient["default"].convertToType(data['from_date'], 'Date');
        }
        if (data.hasOwnProperty('interval')) {
          obj['interval'] = _ApiClient["default"].convertToType(data['interval'], 'Number');
        }
        if (data.hasOwnProperty('message')) {
          obj['message'] = _ApiClient["default"].convertToType(data['message'], 'String');
        }
        if (data.hasOwnProperty('query')) {
          obj['query'] = _ApiClient["default"].convertToType(data['query'], 'String');
        }
        if (data.hasOwnProperty('resp_version')) {
          obj['resp_version'] = _ApiClient["default"].convertToType(data['resp_version'], 'Number');
        }
        if (data.hasOwnProperty('series_limit')) {
          obj['series_limit'] = _ApiClient["default"].convertToType(data['series_limit'], 'Number');
        }
        if (data.hasOwnProperty('status')) {
          obj['status'] = _ApiClient["default"].convertToType(data['status'], 'String');
        }
        if (data.hasOwnProperty('times')) {
          obj['times'] = _ApiClient["default"].convertToType(data['times'], ['Date']);
        }
        if (data.hasOwnProperty('to_date')) {
          obj['to_date'] = _ApiClient["default"].convertToType(data['to_date'], 'Date');
        }
        if (data.hasOwnProperty('values')) {
          obj['values'] = _ApiClient["default"].convertToType(data['values'], ['Number']);
        }
      }
      return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArduinoSeriesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArduinoSeriesResponse</code>.
     */
  }, {
    key: "validateJSON",
    value: function validateJSON(data) {
      // check to make sure all required properties are present in the JSON string
      var _iterator = _createForOfIteratorHelper(ArduinoSeriesResponse.RequiredProperties),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var property = _step.value;
          if (!data[property]) {
            throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
          }
        }
        // ensure the json data is a string
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
        throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
      }
      // ensure the json data is a string
      if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
        throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
      }
      // ensure the json data is a string
      if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
        throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['times'])) {
        throw new Error("Expected the field `times` to be an array in the JSON data but got " + data['times']);
      }
      // ensure the json data is an array
      if (!Array.isArray(data['values'])) {
        throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
      }
      return true;
    }
  }]);
  return ArduinoSeriesResponse;
}();
ArduinoSeriesResponse.RequiredProperties = ["count_values", "from_date", "interval", "query", "resp_version", "status", "times", "to_date", "values"];

/**
 * Total number of values in the array 'values'
 * @member {Number} count_values
 */
ArduinoSeriesResponse.prototype['count_values'] = undefined;

/**
 * From date
 * @member {Date} from_date
 */
ArduinoSeriesResponse.prototype['from_date'] = undefined;

/**
 * Resolution in seconds
 * @member {Number} interval
 */
ArduinoSeriesResponse.prototype['interval'] = undefined;

/**
 * If the response is different than 'ok'
 * @member {String} message
 * @default ''
 */
ArduinoSeriesResponse.prototype['message'] = '';

/**
 * Query of for the data
 * @member {String} query
 */
ArduinoSeriesResponse.prototype['query'] = undefined;

/**
 * Response version
 * @member {Number} resp_version
 */
ArduinoSeriesResponse.prototype['resp_version'] = undefined;

/**
 * Max of values
 * @member {Number} series_limit
 */
ArduinoSeriesResponse.prototype['series_limit'] = undefined;

/**
 * Status of the response
 * @member {String} status
 */
ArduinoSeriesResponse.prototype['status'] = undefined;

/**
 * Timestamp in RFC3339
 * @member {Array.<Date>} times
 */
ArduinoSeriesResponse.prototype['times'] = undefined;

/**
 * To date
 * @member {Date} to_date
 */
ArduinoSeriesResponse.prototype['to_date'] = undefined;

/**
 * Values in Float
 * @member {Array.<Number>} values
 */
ArduinoSeriesResponse.prototype['values'] = undefined;
var _default = exports["default"] = ArduinoSeriesResponse;