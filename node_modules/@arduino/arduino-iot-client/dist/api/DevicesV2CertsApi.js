"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoDevicev2Cert = _interopRequireDefault(require("../model/ArduinoDevicev2Cert"));
var _CreateDevicesV2CertsPayload = _interopRequireDefault(require("../model/CreateDevicesV2CertsPayload"));
var _Devicev2Cert = _interopRequireDefault(require("../model/Devicev2Cert"));
var _Error = _interopRequireDefault(require("../model/Error"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Arduino IoT Cloud API
                                                                                                                                                                                                                                                                                                                                                                                               *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0
                                                                                                                                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* DevicesV2Certs service.
* @module api/DevicesV2CertsApi
* @version 2.0.0
*/
var DevicesV2CertsApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DevicesV2CertsApi. 
  * @alias module:api/DevicesV2CertsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DevicesV2CertsApi(apiClient) {
    _classCallCheck(this, DevicesV2CertsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * create devices_v2_certs
   * Creates a new cert associated to a device. The csr is signed and saved in database. The CommonName will be replaced with the device id.
   * @param {String} id The id of the device
   * @param {module:model/CreateDevicesV2CertsPayload} createDevicesV2CertsPayload 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Cert} and HTTP response
   */
  _createClass(DevicesV2CertsApi, [{
    key: "devicesV2CertsCreateWithHttpInfo",
    value: function devicesV2CertsCreateWithHttpInfo(id, createDevicesV2CertsPayload) {
      var postBody = createDevicesV2CertsPayload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsCreate");
      }
      // verify the required parameter 'createDevicesV2CertsPayload' is set
      if (createDevicesV2CertsPayload === undefined || createDevicesV2CertsPayload === null) {
        throw new _Error["default"]("Missing the required parameter 'createDevicesV2CertsPayload' when calling devicesV2CertsCreate");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/vnd.arduino.devicev2.cert+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2Cert["default"];
      return this.apiClient.callApi('/v2/devices/{id}/certs', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create devices_v2_certs
     * Creates a new cert associated to a device. The csr is signed and saved in database. The CommonName will be replaced with the device id.
     * @param {String} id The id of the device
     * @param {module:model/CreateDevicesV2CertsPayload} createDevicesV2CertsPayload 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Cert}
     */
  }, {
    key: "devicesV2CertsCreate",
    value: function devicesV2CertsCreate(id, createDevicesV2CertsPayload) {
      return this.devicesV2CertsCreateWithHttpInfo(id, createDevicesV2CertsPayload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete devices_v2_certs
     * Removes a cert associated to a device
     * @param {String} cid The id of the cert
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "devicesV2CertsDeleteWithHttpInfo",
    value: function devicesV2CertsDeleteWithHttpInfo(cid, id) {
      var postBody = null;
      // verify the required parameter 'cid' is set
      if (cid === undefined || cid === null) {
        throw new _Error["default"]("Missing the required parameter 'cid' when calling devicesV2CertsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsDelete");
      }
      var pathParams = {
        'cid': cid,
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/v2/devices/{id}/certs/{cid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete devices_v2_certs
     * Removes a cert associated to a device
     * @param {String} cid The id of the cert
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "devicesV2CertsDelete",
    value: function devicesV2CertsDelete(cid, id) {
      return this.devicesV2CertsDeleteWithHttpInfo(cid, id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list devices_v2_certs
     * Returns the list of certs associated to the device
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoDevicev2Cert>} and HTTP response
     */
  }, {
    key: "devicesV2CertsListWithHttpInfo",
    value: function devicesV2CertsListWithHttpInfo(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsList");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2.cert+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoDevicev2Cert["default"]];
      return this.apiClient.callApi('/v2/devices/{id}/certs', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list devices_v2_certs
     * Returns the list of certs associated to the device
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoDevicev2Cert>}
     */
  }, {
    key: "devicesV2CertsList",
    value: function devicesV2CertsList(id) {
      return this.devicesV2CertsListWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show devices_v2_certs
     * Returns the cert requested by the user
     * @param {String} cid The id of the cert
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Cert} and HTTP response
     */
  }, {
    key: "devicesV2CertsShowWithHttpInfo",
    value: function devicesV2CertsShowWithHttpInfo(cid, id) {
      var postBody = null;
      // verify the required parameter 'cid' is set
      if (cid === undefined || cid === null) {
        throw new _Error["default"]("Missing the required parameter 'cid' when calling devicesV2CertsShow");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsShow");
      }
      var pathParams = {
        'cid': cid,
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.devicev2.cert+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2Cert["default"];
      return this.apiClient.callApi('/v2/devices/{id}/certs/{cid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show devices_v2_certs
     * Returns the cert requested by the user
     * @param {String} cid The id of the cert
     * @param {String} id The id of the device
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Cert}
     */
  }, {
    key: "devicesV2CertsShow",
    value: function devicesV2CertsShow(cid, id) {
      return this.devicesV2CertsShowWithHttpInfo(cid, id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update devices_v2_certs
     * Updates a cert associated to a device. The csr is signed and saved in database. The CommonName will be replaced with the device id.
     * @param {String} cid The id of the cert
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Cert} devicev2Cert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoDevicev2Cert} and HTTP response
     */
  }, {
    key: "devicesV2CertsUpdateWithHttpInfo",
    value: function devicesV2CertsUpdateWithHttpInfo(cid, id, devicev2Cert) {
      var postBody = devicev2Cert;
      // verify the required parameter 'cid' is set
      if (cid === undefined || cid === null) {
        throw new _Error["default"]("Missing the required parameter 'cid' when calling devicesV2CertsUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling devicesV2CertsUpdate");
      }
      // verify the required parameter 'devicev2Cert' is set
      if (devicev2Cert === undefined || devicev2Cert === null) {
        throw new _Error["default"]("Missing the required parameter 'devicev2Cert' when calling devicesV2CertsUpdate");
      }
      var pathParams = {
        'cid': cid,
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/vnd.arduino.devicev2.cert+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoDevicev2Cert["default"];
      return this.apiClient.callApi('/v2/devices/{id}/certs/{cid}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update devices_v2_certs
     * Updates a cert associated to a device. The csr is signed and saved in database. The CommonName will be replaced with the device id.
     * @param {String} cid The id of the cert
     * @param {String} id The id of the device
     * @param {module:model/Devicev2Cert} devicev2Cert 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoDevicev2Cert}
     */
  }, {
    key: "devicesV2CertsUpdate",
    value: function devicesV2CertsUpdate(cid, id, devicev2Cert) {
      return this.devicesV2CertsUpdateWithHttpInfo(cid, id, devicev2Cert).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return DevicesV2CertsApi;
}();