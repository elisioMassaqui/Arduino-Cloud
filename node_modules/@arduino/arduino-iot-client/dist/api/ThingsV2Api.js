"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ArduinoThing = _interopRequireDefault(require("../model/ArduinoThing"));
var _Error = _interopRequireDefault(require("../model/Error"));
var _ThingCreate = _interopRequireDefault(require("../model/ThingCreate"));
var _ThingSketch = _interopRequireDefault(require("../model/ThingSketch"));
var _ThingUpdate = _interopRequireDefault(require("../model/ThingUpdate"));
var _UpdateSketch = _interopRequireDefault(require("../model/UpdateSketch"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Arduino IoT Cloud API
                                                                                                                                                                                                                                                                                                                                                                                               *  Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 2.0
                                                                                                                                                                                                                                                                                                                                                                                               * 
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* ThingsV2 service.
* @module api/ThingsV2Api
* @version 2.0.0
*/
var ThingsV2Api = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new ThingsV2Api. 
  * @alias module:api/ThingsV2Api
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ThingsV2Api(apiClient) {
    _classCallCheck(this, ThingsV2Api);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * create things_v2
   * Creates a new thing associated to the user
   * @param {module:model/ThingCreate} thingCreate Payload to create a new thing
   * @param {Object} opts Optional parameters
   * @param {Boolean} [force = false)] If true, detach device from the other thing, and attach to this thing
   * @param {String} [xOrganization] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
   */
  _createClass(ThingsV2Api, [{
    key: "thingsV2CreateWithHttpInfo",
    value: function thingsV2CreateWithHttpInfo(thingCreate, opts) {
      opts = opts || {};
      var postBody = thingCreate;
      // verify the required parameter 'thingCreate' is set
      if (thingCreate === undefined || thingCreate === null) {
        throw new _Error["default"]("Missing the required parameter 'thingCreate' when calling thingsV2Create");
      }
      var pathParams = {};
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v2/things', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * create things_v2
     * Creates a new thing associated to the user
     * @param {module:model/ThingCreate} thingCreate Payload to create a new thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
  }, {
    key: "thingsV2Create",
    value: function thingsV2Create(thingCreate, opts) {
      return this.thingsV2CreateWithHttpInfo(thingCreate, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
  }, {
    key: "thingsV2CreateSketchWithHttpInfo",
    value: function thingsV2CreateSketchWithHttpInfo(id, thingSketch, opts) {
      opts = opts || {};
      var postBody = thingSketch;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2CreateSketch");
      }
      // verify the required parameter 'thingSketch' is set
      if (thingSketch === undefined || thingSketch === null) {
        throw new _Error["default"]("Missing the required parameter 'thingSketch' when calling thingsV2CreateSketch");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v2/things/{id}/sketch', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * createSketch things_v2
     * Creates a new sketch thing associated to the thing
     * @param {String} id The id of the thing
     * @param {module:model/ThingSketch} thingSketch ThingSketchPayload describes a sketch of a thing
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
  }, {
    key: "thingsV2CreateSketch",
    value: function thingsV2CreateSketch(id, thingSketch, opts) {
      return this.thingsV2CreateSketchWithHttpInfo(id, thingSketch, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If true, hard delete the thing
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
  }, {
    key: "thingsV2DeleteWithHttpInfo",
    value: function thingsV2DeleteWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2Delete");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.goa.error+json', 'text/plain'];
      var returnType = null;
      return this.apiClient.callApi('/v2/things/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * delete things_v2
     * Removes a thing associated to the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, hard delete the thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "thingsV2Delete",
    value: function thingsV2Delete(id, opts) {
      return this.thingsV2DeleteWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
  }, {
    key: "thingsV2DeleteSketchWithHttpInfo",
    value: function thingsV2DeleteSketchWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2DeleteSketch");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v2/things/{id}/sketch', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * deleteSketch things_v2
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
  }, {
    key: "thingsV2DeleteSketch",
    value: function thingsV2DeleteSketch(id, opts) {
      return this.thingsV2DeleteSketchWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} [acrossUserIds = false)] If true, returns all the things
     * @param {String} [deviceId] The id of the device you want to filter
     * @param {Array.<String>} [ids] Filter only the desired things
     * @param {Boolean} [showDeleted = false)] If true, shows the soft deleted things
     * @param {Boolean} [showProperties = false)] If true, returns things with their properties, and last values
     * @param {Array.<String>} [tags] Filter by tags
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ArduinoThing>} and HTTP response
     */
  }, {
    key: "thingsV2ListWithHttpInfo",
    value: function thingsV2ListWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'across_user_ids': opts['acrossUserIds'],
        'device_id': opts['deviceId'],
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'show_deleted': opts['showDeleted'],
        'show_properties': opts['showProperties'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json; type=collection', 'application/vnd.goa.error+json'];
      var returnType = [_ArduinoThing["default"]];
      return this.apiClient.callApi('/v2/things', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * list things_v2
     * Returns the list of things associated to the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.acrossUserIds If true, returns all the things (default to false)
     * @param {String} opts.deviceId The id of the device you want to filter
     * @param {Array.<String>} opts.ids Filter only the desired things
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted things (default to false)
     * @param {Boolean} opts.showProperties If true, returns things with their properties, and last values (default to false)
     * @param {Array.<String>} opts.tags Filter by tags
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ArduinoThing>}
     */
  }, {
    key: "thingsV2List",
    value: function thingsV2List(opts) {
      return this.thingsV2ListWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showDeleted = false)] If true, shows the soft deleted thing
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
  }, {
    key: "thingsV2ShowWithHttpInfo",
    value: function thingsV2ShowWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2Show");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'show_deleted': opts['showDeleted']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v2/things/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * show things_v2
     * Returns the thing requested by the user
     * @param {String} id The id of the thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showDeleted If true, shows the soft deleted thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
  }, {
    key: "thingsV2Show",
    value: function thingsV2Show(id, opts) {
      return this.thingsV2ShowWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/ThingUpdate} thingUpdate Payload to update an existing thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] If true, detach device from the other thing, and attach to this thing
     * @param {String} [xOrganization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
  }, {
    key: "thingsV2UpdateWithHttpInfo",
    value: function thingsV2UpdateWithHttpInfo(id, thingUpdate, opts) {
      opts = opts || {};
      var postBody = thingUpdate;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2Update");
      }
      // verify the required parameter 'thingUpdate' is set
      if (thingUpdate === undefined || thingUpdate === null) {
        throw new _Error["default"]("Missing the required parameter 'thingUpdate' when calling thingsV2Update");
      }
      var pathParams = {
        'id': id
      };
      var queryParams = {
        'force': opts['force']
      };
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v2/things/{id}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * update things_v2
     * Updates a thing associated to the user
     * @param {String} id The id of the thing
     * @param {module:model/ThingUpdate} thingUpdate Payload to update an existing thing
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force If true, detach device from the other thing, and attach to this thing (default to false)
     * @param {String} opts.xOrganization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
  }, {
    key: "thingsV2Update",
    value: function thingsV2Update(id, thingUpdate, opts) {
      return this.thingsV2UpdateWithHttpInfo(id, thingUpdate, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @param {Object} opts Optional parameters
     * @param {String} [xOrganization] 
     * @param {module:model/UpdateSketch} [updateSketch] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ArduinoThing} and HTTP response
     */
  }, {
    key: "thingsV2UpdateSketchWithHttpInfo",
    value: function thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts) {
      opts = opts || {};
      var postBody = opts['updateSketch'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling thingsV2UpdateSketch");
      }
      // verify the required parameter 'sketchId' is set
      if (sketchId === undefined || sketchId === null) {
        throw new _Error["default"]("Missing the required parameter 'sketchId' when calling thingsV2UpdateSketch");
      }
      var pathParams = {
        'id': id,
        'sketchId': sketchId
      };
      var queryParams = {};
      var headerParams = {
        'X-Organization': opts['xOrganization']
      };
      var formParams = {};
      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/vnd.arduino.thing+json', 'application/vnd.goa.error+json'];
      var returnType = _ArduinoThing["default"];
      return this.apiClient.callApi('/v2/things/{id}/sketch/{sketchId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * updateSketch things_v2
     * Update an existing thing sketch
     * @param {String} id The id of the thing
     * @param {String} sketchId The id of the sketch
     * @param {Object} opts Optional parameters
     * @param {String} opts.xOrganization 
     * @param {module:model/UpdateSketch} opts.updateSketch 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ArduinoThing}
     */
  }, {
    key: "thingsV2UpdateSketch",
    value: function thingsV2UpdateSketch(id, sketchId, opts) {
      return this.thingsV2UpdateSketchWithHttpInfo(id, sketchId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ThingsV2Api;
}();